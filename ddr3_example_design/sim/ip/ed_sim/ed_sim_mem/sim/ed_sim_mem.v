// ed_sim_mem.v

// Generated using ACDS version 21.4 67

`timescale 1 ps / 1 ps
module ed_sim_mem (
		input  wire [0:0]  mem_ck,      // mem.mem_ck,      CK clock
		input  wire [0:0]  mem_ck_n,    //    .mem_ck_n,    CK clock (negative leg)
		input  wire [14:0] mem_a,       //    .mem_a,       Address
		input  wire [2:0]  mem_ba,      //    .mem_ba,      Bank address
		input  wire [0:0]  mem_cke,     //    .mem_cke,     Clock enable
		input  wire [0:0]  mem_cs_n,    //    .mem_cs_n,    Chip select
		input  wire [0:0]  mem_odt,     //    .mem_odt,     On-die termination
		input  wire [0:0]  mem_reset_n, //    .mem_reset_n, Asynchronous reset
		input  wire [0:0]  mem_we_n,    //    .mem_we_n,    WE command
		input  wire [0:0]  mem_ras_n,   //    .mem_ras_n,   RAS command
		input  wire [0:0]  mem_cas_n,   //    .mem_cas_n,   CAS command
		inout  wire [4:0]  mem_dqs,     //    .mem_dqs,     Data strobe
		inout  wire [4:0]  mem_dqs_n,   //    .mem_dqs_n,   Data strobe (negative leg)
		inout  wire [39:0] mem_dq,      //    .mem_dq,      Read/write data
		input  wire [4:0]  mem_dm       //    .mem_dm,      Write data mask
	);

	ed_sim_mem_altera_emif_mem_model_191_2oew2ha mem (
		.mem_ck      (mem_ck),      //   input,   width = 1, mem.mem_ck
		.mem_ck_n    (mem_ck_n),    //   input,   width = 1,    .mem_ck_n
		.mem_a       (mem_a),       //   input,  width = 15,    .mem_a
		.mem_ba      (mem_ba),      //   input,   width = 3,    .mem_ba
		.mem_cke     (mem_cke),     //   input,   width = 1,    .mem_cke
		.mem_cs_n    (mem_cs_n),    //   input,   width = 1,    .mem_cs_n
		.mem_odt     (mem_odt),     //   input,   width = 1,    .mem_odt
		.mem_reset_n (mem_reset_n), //   input,   width = 1,    .mem_reset_n
		.mem_we_n    (mem_we_n),    //   input,   width = 1,    .mem_we_n
		.mem_ras_n   (mem_ras_n),   //   input,   width = 1,    .mem_ras_n
		.mem_cas_n   (mem_cas_n),   //   input,   width = 1,    .mem_cas_n
		.mem_dqs     (mem_dqs),     //   inout,   width = 5,    .mem_dqs
		.mem_dqs_n   (mem_dqs_n),   //   inout,   width = 5,    .mem_dqs_n
		.mem_dq      (mem_dq),      //   inout,  width = 40,    .mem_dq
		.mem_dm      (mem_dm)       //   input,   width = 5,    .mem_dm
	);

endmodule
