// rx_2.v

// Generated using ACDS version 21.3 170

`timescale 1 ps / 1 ps
module rx_2 (
		input  wire [7:0]   ff_rx_data,        // avalon_streaming_sink.data
		input  wire         ff_rx_eop,         //                      .endofpacket
		output wire         ff_rx_rdy,         //                      .ready
		input  wire         ff_rx_sop,         //                      .startofpacket
		input  wire         ff_rx_dval,        //                      .valid
		input  wire [4:0]   rx_err,            //                      .error
		output wire [24:0]  amm_addr,          //         avalon_master.address
		input  wire [255:0] amm_readdata,      //                      .readdata
		output wire [255:0] amm_writedata,     //                      .writedata
		output wire         amm_read,          //                      .read
		output wire         amm_write,         //                      .write
		output wire [31:0]  amm_byteenable,    //                      .byteenable
		output wire [6:0]   amm_burstcount,    //                      .burstcount
		input  wire         amm_readdatavalid, //                      .readdatavalid
		input  wire         amm_ready,         //                      .waitrequest
		output wire [1:0]   rx_afull_data,     //           fifo_status.data
		output wire         rx_afull_valid,    //                      .valid
		output wire         rx_afull_channel,  //                      .channel
		output wire [11:0]  size_received,     //            rx_signals.size_received
		output wire         data_saved,        //                      .data_saved
		input  wire         rst,               //                 reset.reset
		input  wire         clk_original,      //             clock_tse.clk
		input  wire         rst_n,             //           reset_board.reset
		input  wire         avalon_clk,        //             clock_ddr.clk
		input  wire         avalon_reset,      //             reset_ddr.reset
		input  wire         fifo_status_clk    //       fifo_status_clk.clk
	);

	receive_packet_ddr rx_2 (
		.ff_rx_data        (ff_rx_data),        //   input,    width = 8, avalon_streaming_sink.data
		.ff_rx_eop         (ff_rx_eop),         //   input,    width = 1,                      .endofpacket
		.ff_rx_rdy         (ff_rx_rdy),         //  output,    width = 1,                      .ready
		.ff_rx_sop         (ff_rx_sop),         //   input,    width = 1,                      .startofpacket
		.ff_rx_dval        (ff_rx_dval),        //   input,    width = 1,                      .valid
		.rx_err            (rx_err),            //   input,    width = 5,                      .error
		.amm_addr          (amm_addr),          //  output,   width = 25,         avalon_master.address
		.amm_readdata      (amm_readdata),      //   input,  width = 256,                      .readdata
		.amm_writedata     (amm_writedata),     //  output,  width = 256,                      .writedata
		.amm_read          (amm_read),          //  output,    width = 1,                      .read
		.amm_write         (amm_write),         //  output,    width = 1,                      .write
		.amm_byteenable    (amm_byteenable),    //  output,   width = 32,                      .byteenable
		.amm_burstcount    (amm_burstcount),    //  output,    width = 7,                      .burstcount
		.amm_readdatavalid (amm_readdatavalid), //   input,    width = 1,                      .readdatavalid
		.amm_ready         (amm_ready),         //   input,    width = 1,                      .waitrequest
		.rx_afull_data     (rx_afull_data),     //  output,    width = 2,           fifo_status.data
		.rx_afull_valid    (rx_afull_valid),    //  output,    width = 1,                      .valid
		.rx_afull_channel  (rx_afull_channel),  //  output,    width = 1,                      .channel
		.size_received     (size_received),     //  output,   width = 12,            rx_signals.size_received
		.data_saved        (data_saved),        //  output,    width = 1,                      .data_saved
		.rst               (rst),               //   input,    width = 1,                 reset.reset
		.clk_original      (clk_original),      //   input,    width = 1,             clock_tse.clk
		.rst_n             (rst_n),             //   input,    width = 1,           reset_board.reset
		.avalon_clk        (avalon_clk),        //   input,    width = 1,             clock_ddr.clk
		.avalon_reset      (avalon_reset),      //   input,    width = 1,             reset_ddr.reset
		.fifo_status_clk   (fifo_status_clk)    //   input,    width = 1,       fifo_status_clk.clk
	);

endmodule
