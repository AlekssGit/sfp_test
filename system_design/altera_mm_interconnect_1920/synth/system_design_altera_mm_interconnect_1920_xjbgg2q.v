// system_design_altera_mm_interconnect_1920_xjbgg2q.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 21.3 170

`timescale 1 ps / 1 ps
module system_design_altera_mm_interconnect_1920_xjbgg2q (
		input  wire [63:0]  pcie_rxm_bar2_address,                                        //                                          pcie_rxm_bar2.address
		output wire         pcie_rxm_bar2_waitrequest,                                    //                                                       .waitrequest
		input  wire [5:0]   pcie_rxm_bar2_burstcount,                                     //                                                       .burstcount
		input  wire [15:0]  pcie_rxm_bar2_byteenable,                                     //                                                       .byteenable
		input  wire         pcie_rxm_bar2_read,                                           //                                                       .read
		output wire [127:0] pcie_rxm_bar2_readdata,                                       //                                                       .readdata
		output wire         pcie_rxm_bar2_readdatavalid,                                  //                                                       .readdatavalid
		input  wire         pcie_rxm_bar2_write,                                          //                                                       .write
		input  wire [127:0] pcie_rxm_bar2_writedata,                                      //                                                       .writedata
		output wire [24:0]  ddr3_ctrl_amm_0_address,                                      //                                        ddr3_ctrl_amm_0.address
		output wire         ddr3_ctrl_amm_0_write,                                        //                                                       .write
		output wire         ddr3_ctrl_amm_0_read,                                         //                                                       .read
		input  wire [255:0] ddr3_ctrl_amm_0_readdata,                                     //                                                       .readdata
		output wire [255:0] ddr3_ctrl_amm_0_writedata,                                    //                                                       .writedata
		output wire [6:0]   ddr3_ctrl_amm_0_burstcount,                                   //                                                       .burstcount
		output wire [31:0]  ddr3_ctrl_amm_0_byteenable,                                   //                                                       .byteenable
		input  wire         ddr3_ctrl_amm_0_readdatavalid,                                //                                                       .readdatavalid
		input  wire         ddr3_ctrl_amm_0_waitrequest,                                  //                                                       .waitrequest
		input  wire         pcie_rxm_bar2_translator_reset_reset_bridge_in_reset_reset,   //   pcie_rxm_bar2_translator_reset_reset_bridge_in_reset.reset
		input  wire         ddr3_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset, // ddr3_ctrl_amm_0_translator_reset_reset_bridge_in_reset.reset
		input  wire         pcie_coreclkout_hip_clk,                                      //                                    pcie_coreclkout_hip.clk
		input  wire         ddr3_emif_usr_clk_clk                                         //                                      ddr3_emif_usr_clk.clk
	);

	wire          pcie_rxm_bar2_translator_avalon_universal_master_0_waitrequest;   // pcie_rxm_bar2_agent:av_waitrequest -> pcie_rxm_bar2_translator:uav_waitrequest
	wire  [127:0] pcie_rxm_bar2_translator_avalon_universal_master_0_readdata;      // pcie_rxm_bar2_agent:av_readdata -> pcie_rxm_bar2_translator:uav_readdata
	wire          pcie_rxm_bar2_translator_avalon_universal_master_0_debugaccess;   // pcie_rxm_bar2_translator:uav_debugaccess -> pcie_rxm_bar2_agent:av_debugaccess
	wire   [63:0] pcie_rxm_bar2_translator_avalon_universal_master_0_address;       // pcie_rxm_bar2_translator:uav_address -> pcie_rxm_bar2_agent:av_address
	wire          pcie_rxm_bar2_translator_avalon_universal_master_0_read;          // pcie_rxm_bar2_translator:uav_read -> pcie_rxm_bar2_agent:av_read
	wire   [15:0] pcie_rxm_bar2_translator_avalon_universal_master_0_byteenable;    // pcie_rxm_bar2_translator:uav_byteenable -> pcie_rxm_bar2_agent:av_byteenable
	wire          pcie_rxm_bar2_translator_avalon_universal_master_0_readdatavalid; // pcie_rxm_bar2_agent:av_readdatavalid -> pcie_rxm_bar2_translator:uav_readdatavalid
	wire          pcie_rxm_bar2_translator_avalon_universal_master_0_lock;          // pcie_rxm_bar2_translator:uav_lock -> pcie_rxm_bar2_agent:av_lock
	wire          pcie_rxm_bar2_translator_avalon_universal_master_0_write;         // pcie_rxm_bar2_translator:uav_write -> pcie_rxm_bar2_agent:av_write
	wire  [127:0] pcie_rxm_bar2_translator_avalon_universal_master_0_writedata;     // pcie_rxm_bar2_translator:uav_writedata -> pcie_rxm_bar2_agent:av_writedata
	wire    [9:0] pcie_rxm_bar2_translator_avalon_universal_master_0_burstcount;    // pcie_rxm_bar2_translator:uav_burstcount -> pcie_rxm_bar2_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                // rsp_mux:src_valid -> pcie_rxm_bar2_agent:rp_valid
	wire  [259:0] rsp_mux_src_data;                                                 // rsp_mux:src_data -> pcie_rxm_bar2_agent:rp_data
	wire          rsp_mux_src_ready;                                                // pcie_rxm_bar2_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                              // rsp_mux:src_channel -> pcie_rxm_bar2_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                        // rsp_mux:src_startofpacket -> pcie_rxm_bar2_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                          // rsp_mux:src_endofpacket -> pcie_rxm_bar2_agent:rp_endofpacket
	wire  [255:0] ddr3_ctrl_amm_0_agent_m0_readdata;                                // ddr3_ctrl_amm_0_translator:uav_readdata -> ddr3_ctrl_amm_0_agent:m0_readdata
	wire          ddr3_ctrl_amm_0_agent_m0_waitrequest;                             // ddr3_ctrl_amm_0_translator:uav_waitrequest -> ddr3_ctrl_amm_0_agent:m0_waitrequest
	wire          ddr3_ctrl_amm_0_agent_m0_debugaccess;                             // ddr3_ctrl_amm_0_agent:m0_debugaccess -> ddr3_ctrl_amm_0_translator:uav_debugaccess
	wire   [63:0] ddr3_ctrl_amm_0_agent_m0_address;                                 // ddr3_ctrl_amm_0_agent:m0_address -> ddr3_ctrl_amm_0_translator:uav_address
	wire   [31:0] ddr3_ctrl_amm_0_agent_m0_byteenable;                              // ddr3_ctrl_amm_0_agent:m0_byteenable -> ddr3_ctrl_amm_0_translator:uav_byteenable
	wire          ddr3_ctrl_amm_0_agent_m0_read;                                    // ddr3_ctrl_amm_0_agent:m0_read -> ddr3_ctrl_amm_0_translator:uav_read
	wire          ddr3_ctrl_amm_0_agent_m0_readdatavalid;                           // ddr3_ctrl_amm_0_translator:uav_readdatavalid -> ddr3_ctrl_amm_0_agent:m0_readdatavalid
	wire          ddr3_ctrl_amm_0_agent_m0_lock;                                    // ddr3_ctrl_amm_0_agent:m0_lock -> ddr3_ctrl_amm_0_translator:uav_lock
	wire  [255:0] ddr3_ctrl_amm_0_agent_m0_writedata;                               // ddr3_ctrl_amm_0_agent:m0_writedata -> ddr3_ctrl_amm_0_translator:uav_writedata
	wire          ddr3_ctrl_amm_0_agent_m0_write;                                   // ddr3_ctrl_amm_0_agent:m0_write -> ddr3_ctrl_amm_0_translator:uav_write
	wire   [11:0] ddr3_ctrl_amm_0_agent_m0_burstcount;                              // ddr3_ctrl_amm_0_agent:m0_burstcount -> ddr3_ctrl_amm_0_translator:uav_burstcount
	wire          ddr3_ctrl_amm_0_agent_rf_source_valid;                            // ddr3_ctrl_amm_0_agent:rf_source_valid -> ddr3_ctrl_amm_0_agent_rsp_fifo:in_valid
	wire  [404:0] ddr3_ctrl_amm_0_agent_rf_source_data;                             // ddr3_ctrl_amm_0_agent:rf_source_data -> ddr3_ctrl_amm_0_agent_rsp_fifo:in_data
	wire          ddr3_ctrl_amm_0_agent_rf_source_ready;                            // ddr3_ctrl_amm_0_agent_rsp_fifo:in_ready -> ddr3_ctrl_amm_0_agent:rf_source_ready
	wire          ddr3_ctrl_amm_0_agent_rf_source_startofpacket;                    // ddr3_ctrl_amm_0_agent:rf_source_startofpacket -> ddr3_ctrl_amm_0_agent_rsp_fifo:in_startofpacket
	wire          ddr3_ctrl_amm_0_agent_rf_source_endofpacket;                      // ddr3_ctrl_amm_0_agent:rf_source_endofpacket -> ddr3_ctrl_amm_0_agent_rsp_fifo:in_endofpacket
	wire          ddr3_ctrl_amm_0_agent_rsp_fifo_out_valid;                         // ddr3_ctrl_amm_0_agent_rsp_fifo:out_valid -> ddr3_ctrl_amm_0_agent:rf_sink_valid
	wire  [404:0] ddr3_ctrl_amm_0_agent_rsp_fifo_out_data;                          // ddr3_ctrl_amm_0_agent_rsp_fifo:out_data -> ddr3_ctrl_amm_0_agent:rf_sink_data
	wire          ddr3_ctrl_amm_0_agent_rsp_fifo_out_ready;                         // ddr3_ctrl_amm_0_agent:rf_sink_ready -> ddr3_ctrl_amm_0_agent_rsp_fifo:out_ready
	wire          ddr3_ctrl_amm_0_agent_rsp_fifo_out_startofpacket;                 // ddr3_ctrl_amm_0_agent_rsp_fifo:out_startofpacket -> ddr3_ctrl_amm_0_agent:rf_sink_startofpacket
	wire          ddr3_ctrl_amm_0_agent_rsp_fifo_out_endofpacket;                   // ddr3_ctrl_amm_0_agent_rsp_fifo:out_endofpacket -> ddr3_ctrl_amm_0_agent:rf_sink_endofpacket
	wire          ddr3_ctrl_amm_0_agent_rdata_fifo_src_valid;                       // ddr3_ctrl_amm_0_agent:rdata_fifo_src_valid -> ddr3_ctrl_amm_0_agent_rdata_fifo:in_valid
	wire  [257:0] ddr3_ctrl_amm_0_agent_rdata_fifo_src_data;                        // ddr3_ctrl_amm_0_agent:rdata_fifo_src_data -> ddr3_ctrl_amm_0_agent_rdata_fifo:in_data
	wire          ddr3_ctrl_amm_0_agent_rdata_fifo_src_ready;                       // ddr3_ctrl_amm_0_agent_rdata_fifo:in_ready -> ddr3_ctrl_amm_0_agent:rdata_fifo_src_ready
	wire          ddr3_ctrl_amm_0_agent_rdata_fifo_out_valid;                       // ddr3_ctrl_amm_0_agent_rdata_fifo:out_valid -> ddr3_ctrl_amm_0_agent:rdata_fifo_sink_valid
	wire  [257:0] ddr3_ctrl_amm_0_agent_rdata_fifo_out_data;                        // ddr3_ctrl_amm_0_agent_rdata_fifo:out_data -> ddr3_ctrl_amm_0_agent:rdata_fifo_sink_data
	wire          ddr3_ctrl_amm_0_agent_rdata_fifo_out_ready;                       // ddr3_ctrl_amm_0_agent:rdata_fifo_sink_ready -> ddr3_ctrl_amm_0_agent_rdata_fifo:out_ready
	wire          pcie_rxm_bar2_agent_cp_valid;                                     // pcie_rxm_bar2_agent:cp_valid -> router:sink_valid
	wire  [259:0] pcie_rxm_bar2_agent_cp_data;                                      // pcie_rxm_bar2_agent:cp_data -> router:sink_data
	wire          pcie_rxm_bar2_agent_cp_ready;                                     // router:sink_ready -> pcie_rxm_bar2_agent:cp_ready
	wire          pcie_rxm_bar2_agent_cp_startofpacket;                             // pcie_rxm_bar2_agent:cp_startofpacket -> router:sink_startofpacket
	wire          pcie_rxm_bar2_agent_cp_endofpacket;                               // pcie_rxm_bar2_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                 // router:src_valid -> cmd_demux:sink_valid
	wire  [259:0] router_src_data;                                                  // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                 // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                               // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                         // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                           // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          ddr3_ctrl_amm_0_agent_rp_valid;                                   // ddr3_ctrl_amm_0_agent:rp_valid -> router_001:sink_valid
	wire  [403:0] ddr3_ctrl_amm_0_agent_rp_data;                                    // ddr3_ctrl_amm_0_agent:rp_data -> router_001:sink_data
	wire          ddr3_ctrl_amm_0_agent_rp_ready;                                   // router_001:sink_ready -> ddr3_ctrl_amm_0_agent:rp_ready
	wire          ddr3_ctrl_amm_0_agent_rp_startofpacket;                           // ddr3_ctrl_amm_0_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          ddr3_ctrl_amm_0_agent_rp_endofpacket;                             // ddr3_ctrl_amm_0_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          cmd_mux_src_valid;                                                // cmd_mux:src_valid -> ddr3_ctrl_amm_0_cmd_width_adapter:in_valid
	wire  [259:0] cmd_mux_src_data;                                                 // cmd_mux:src_data -> ddr3_ctrl_amm_0_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                // ddr3_ctrl_amm_0_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                              // cmd_mux:src_channel -> ddr3_ctrl_amm_0_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                        // cmd_mux:src_startofpacket -> ddr3_ctrl_amm_0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                          // cmd_mux:src_endofpacket -> ddr3_ctrl_amm_0_cmd_width_adapter:in_endofpacket
	wire          ddr3_ctrl_amm_0_cmd_width_adapter_src_valid;                      // ddr3_ctrl_amm_0_cmd_width_adapter:out_valid -> ddr3_ctrl_amm_0_agent:cp_valid
	wire  [403:0] ddr3_ctrl_amm_0_cmd_width_adapter_src_data;                       // ddr3_ctrl_amm_0_cmd_width_adapter:out_data -> ddr3_ctrl_amm_0_agent:cp_data
	wire          ddr3_ctrl_amm_0_cmd_width_adapter_src_ready;                      // ddr3_ctrl_amm_0_agent:cp_ready -> ddr3_ctrl_amm_0_cmd_width_adapter:out_ready
	wire    [0:0] ddr3_ctrl_amm_0_cmd_width_adapter_src_channel;                    // ddr3_ctrl_amm_0_cmd_width_adapter:out_channel -> ddr3_ctrl_amm_0_agent:cp_channel
	wire          ddr3_ctrl_amm_0_cmd_width_adapter_src_startofpacket;              // ddr3_ctrl_amm_0_cmd_width_adapter:out_startofpacket -> ddr3_ctrl_amm_0_agent:cp_startofpacket
	wire          ddr3_ctrl_amm_0_cmd_width_adapter_src_endofpacket;                // ddr3_ctrl_amm_0_cmd_width_adapter:out_endofpacket -> ddr3_ctrl_amm_0_agent:cp_endofpacket
	wire          router_001_src_valid;                                             // router_001:src_valid -> ddr3_ctrl_amm_0_rsp_width_adapter:in_valid
	wire  [403:0] router_001_src_data;                                              // router_001:src_data -> ddr3_ctrl_amm_0_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                             // ddr3_ctrl_amm_0_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                           // router_001:src_channel -> ddr3_ctrl_amm_0_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                     // router_001:src_startofpacket -> ddr3_ctrl_amm_0_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                       // router_001:src_endofpacket -> ddr3_ctrl_amm_0_rsp_width_adapter:in_endofpacket
	wire          ddr3_ctrl_amm_0_rsp_width_adapter_src_valid;                      // ddr3_ctrl_amm_0_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [259:0] ddr3_ctrl_amm_0_rsp_width_adapter_src_data;                       // ddr3_ctrl_amm_0_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          ddr3_ctrl_amm_0_rsp_width_adapter_src_ready;                      // rsp_demux:sink_ready -> ddr3_ctrl_amm_0_rsp_width_adapter:out_ready
	wire    [0:0] ddr3_ctrl_amm_0_rsp_width_adapter_src_channel;                    // ddr3_ctrl_amm_0_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          ddr3_ctrl_amm_0_rsp_width_adapter_src_startofpacket;              // ddr3_ctrl_amm_0_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          ddr3_ctrl_amm_0_rsp_width_adapter_src_endofpacket;                // ddr3_ctrl_amm_0_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_demux_src0_valid;                                             // cmd_demux:src0_valid -> crosser:in_valid
	wire  [259:0] cmd_demux_src0_data;                                              // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                             // crosser:in_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                           // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                     // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                       // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [259:0] crosser_out_data;                                                 // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [0:0] crosser_out_channel;                                              // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                        // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                          // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                             // rsp_demux:src0_valid -> crosser_001:in_valid
	wire  [259:0] rsp_demux_src0_data;                                              // rsp_demux:src0_data -> crosser_001:in_data
	wire          rsp_demux_src0_ready;                                             // crosser_001:in_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                           // rsp_demux:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_src0_startofpacket;                                     // rsp_demux:src0_startofpacket -> crosser_001:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                       // rsp_demux:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                            // crosser_001:out_valid -> rsp_mux:sink0_valid
	wire  [259:0] crosser_001_out_data;                                             // crosser_001:out_data -> rsp_mux:sink0_data
	wire          crosser_001_out_ready;                                            // rsp_mux:sink0_ready -> crosser_001:out_ready
	wire    [0:0] crosser_001_out_channel;                                          // crosser_001:out_channel -> rsp_mux:sink0_channel
	wire          crosser_001_out_startofpacket;                                    // crosser_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                      // crosser_001:out_endofpacket -> rsp_mux:sink0_endofpacket

	system_design_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) pcie_rxm_bar2_translator (
		.clk                    (pcie_coreclkout_hip_clk),                                          //   input,    width = 1,                       clk.clk
		.reset                  (pcie_rxm_bar2_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1,                     reset.reset
		.uav_address            (pcie_rxm_bar2_translator_avalon_universal_master_0_address),       //  output,   width = 64, avalon_universal_master_0.address
		.uav_burstcount         (pcie_rxm_bar2_translator_avalon_universal_master_0_burstcount),    //  output,   width = 10,                          .burstcount
		.uav_read               (pcie_rxm_bar2_translator_avalon_universal_master_0_read),          //  output,    width = 1,                          .read
		.uav_write              (pcie_rxm_bar2_translator_avalon_universal_master_0_write),         //  output,    width = 1,                          .write
		.uav_waitrequest        (pcie_rxm_bar2_translator_avalon_universal_master_0_waitrequest),   //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (pcie_rxm_bar2_translator_avalon_universal_master_0_readdatavalid), //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (pcie_rxm_bar2_translator_avalon_universal_master_0_byteenable),    //  output,   width = 16,                          .byteenable
		.uav_readdata           (pcie_rxm_bar2_translator_avalon_universal_master_0_readdata),      //   input,  width = 128,                          .readdata
		.uav_writedata          (pcie_rxm_bar2_translator_avalon_universal_master_0_writedata),     //  output,  width = 128,                          .writedata
		.uav_lock               (pcie_rxm_bar2_translator_avalon_universal_master_0_lock),          //  output,    width = 1,                          .lock
		.uav_debugaccess        (pcie_rxm_bar2_translator_avalon_universal_master_0_debugaccess),   //  output,    width = 1,                          .debugaccess
		.av_address             (pcie_rxm_bar2_address),                                            //   input,   width = 64,      avalon_anti_master_0.address
		.av_waitrequest         (pcie_rxm_bar2_waitrequest),                                        //  output,    width = 1,                          .waitrequest
		.av_burstcount          (pcie_rxm_bar2_burstcount),                                         //   input,    width = 6,                          .burstcount
		.av_byteenable          (pcie_rxm_bar2_byteenable),                                         //   input,   width = 16,                          .byteenable
		.av_read                (pcie_rxm_bar2_read),                                               //   input,    width = 1,                          .read
		.av_readdata            (pcie_rxm_bar2_readdata),                                           //  output,  width = 128,                          .readdata
		.av_readdatavalid       (pcie_rxm_bar2_readdatavalid),                                      //  output,    width = 1,                          .readdatavalid
		.av_write               (pcie_rxm_bar2_write),                                              //   input,    width = 1,                          .write
		.av_writedata           (pcie_rxm_bar2_writedata),                                          //   input,  width = 128,                          .writedata
		.av_beginbursttransfer  (1'b0),                                                             // (terminated),                                         
		.av_begintransfer       (1'b0),                                                             // (terminated),                                         
		.av_chipselect          (1'b0),                                                             // (terminated),                                         
		.av_lock                (1'b0),                                                             // (terminated),                                         
		.av_debugaccess         (1'b0),                                                             // (terminated),                                         
		.uav_clken              (),                                                                 // (terminated),                                         
		.av_clken               (1'b1),                                                             // (terminated),                                         
		.uav_response           (2'b00),                                                            // (terminated),                                         
		.av_response            (),                                                                 // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                             // (terminated),                                         
		.av_writeresponsevalid  ()                                                                  // (terminated),                                         
	);

	system_design_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (12),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ddr3_ctrl_amm_0_translator (
		.clk                    (ddr3_emif_usr_clk_clk),                                        //   input,    width = 1,                      clk.clk
		.reset                  (ddr3_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (ddr3_ctrl_amm_0_agent_m0_address),                             //   input,   width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (ddr3_ctrl_amm_0_agent_m0_burstcount),                          //   input,   width = 12,                         .burstcount
		.uav_read               (ddr3_ctrl_amm_0_agent_m0_read),                                //   input,    width = 1,                         .read
		.uav_write              (ddr3_ctrl_amm_0_agent_m0_write),                               //   input,    width = 1,                         .write
		.uav_waitrequest        (ddr3_ctrl_amm_0_agent_m0_waitrequest),                         //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (ddr3_ctrl_amm_0_agent_m0_readdatavalid),                       //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (ddr3_ctrl_amm_0_agent_m0_byteenable),                          //   input,   width = 32,                         .byteenable
		.uav_readdata           (ddr3_ctrl_amm_0_agent_m0_readdata),                            //  output,  width = 256,                         .readdata
		.uav_writedata          (ddr3_ctrl_amm_0_agent_m0_writedata),                           //   input,  width = 256,                         .writedata
		.uav_lock               (ddr3_ctrl_amm_0_agent_m0_lock),                                //   input,    width = 1,                         .lock
		.uav_debugaccess        (ddr3_ctrl_amm_0_agent_m0_debugaccess),                         //   input,    width = 1,                         .debugaccess
		.av_address             (ddr3_ctrl_amm_0_address),                                      //  output,   width = 25,      avalon_anti_slave_0.address
		.av_write               (ddr3_ctrl_amm_0_write),                                        //  output,    width = 1,                         .write
		.av_read                (ddr3_ctrl_amm_0_read),                                         //  output,    width = 1,                         .read
		.av_readdata            (ddr3_ctrl_amm_0_readdata),                                     //   input,  width = 256,                         .readdata
		.av_writedata           (ddr3_ctrl_amm_0_writedata),                                    //  output,  width = 256,                         .writedata
		.av_burstcount          (ddr3_ctrl_amm_0_burstcount),                                   //  output,    width = 7,                         .burstcount
		.av_byteenable          (ddr3_ctrl_amm_0_byteenable),                                   //  output,   width = 32,                         .byteenable
		.av_readdatavalid       (ddr3_ctrl_amm_0_readdatavalid),                                //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (ddr3_ctrl_amm_0_waitrequest),                                  //   input,    width = 1,                         .waitrequest
		.av_begintransfer       (),                                                             // (terminated),                                        
		.av_beginbursttransfer  (),                                                             // (terminated),                                        
		.av_writebyteenable     (),                                                             // (terminated),                                        
		.av_lock                (),                                                             // (terminated),                                        
		.av_chipselect          (),                                                             // (terminated),                                        
		.av_clken               (),                                                             // (terminated),                                        
		.uav_clken              (1'b0),                                                         // (terminated),                                        
		.av_debugaccess         (),                                                             // (terminated),                                        
		.av_outputenable        (),                                                             // (terminated),                                        
		.uav_response           (),                                                             // (terminated),                                        
		.av_response            (2'b00),                                                        // (terminated),                                        
		.uav_writeresponsevalid (),                                                             // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                        
	);

	system_design_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (259),
		.PKT_DOMAIN_H              (258),
		.PKT_DOMAIN_L              (257),
		.PKT_SNOOP_H               (256),
		.PKT_SNOOP_L               (253),
		.PKT_BARRIER_H             (252),
		.PKT_BARRIER_L             (251),
		.PKT_ORI_BURST_SIZE_H      (250),
		.PKT_ORI_BURST_SIZE_L      (248),
		.PKT_RESPONSE_STATUS_H     (247),
		.PKT_RESPONSE_STATUS_L     (246),
		.PKT_QOS_H                 (235),
		.PKT_QOS_L                 (235),
		.PKT_DATA_SIDEBAND_H       (233),
		.PKT_DATA_SIDEBAND_L       (233),
		.PKT_ADDR_SIDEBAND_H       (232),
		.PKT_ADDR_SIDEBAND_L       (232),
		.PKT_BURST_TYPE_H          (231),
		.PKT_BURST_TYPE_L          (230),
		.PKT_CACHE_H               (245),
		.PKT_CACHE_L               (242),
		.PKT_THREAD_ID_H           (238),
		.PKT_THREAD_ID_L           (238),
		.PKT_BURST_SIZE_H          (229),
		.PKT_BURST_SIZE_L          (227),
		.PKT_TRANS_EXCLUSIVE       (213),
		.PKT_TRANS_LOCK            (212),
		.PKT_BEGIN_BURST           (234),
		.PKT_PROTECTION_H          (241),
		.PKT_PROTECTION_L          (239),
		.PKT_BURSTWRAP_H           (226),
		.PKT_BURSTWRAP_L           (226),
		.PKT_BYTE_CNT_H            (225),
		.PKT_BYTE_CNT_L            (214),
		.PKT_ADDR_H                (207),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (208),
		.PKT_TRANS_POSTED          (209),
		.PKT_TRANS_WRITE           (210),
		.PKT_TRANS_READ            (211),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (236),
		.PKT_SRC_ID_L              (236),
		.PKT_DEST_ID_H             (237),
		.PKT_DEST_ID_L             (237),
		.ST_DATA_W                 (260),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) pcie_rxm_bar2_agent (
		.clk                   (pcie_coreclkout_hip_clk),                                          //   input,    width = 1,       clk.clk
		.reset                 (pcie_rxm_bar2_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (pcie_rxm_bar2_translator_avalon_universal_master_0_address),       //   input,   width = 64,        av.address
		.av_write              (pcie_rxm_bar2_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (pcie_rxm_bar2_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (pcie_rxm_bar2_translator_avalon_universal_master_0_writedata),     //   input,  width = 128,          .writedata
		.av_readdata           (pcie_rxm_bar2_translator_avalon_universal_master_0_readdata),      //  output,  width = 128,          .readdata
		.av_waitrequest        (pcie_rxm_bar2_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (pcie_rxm_bar2_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (pcie_rxm_bar2_translator_avalon_universal_master_0_byteenable),    //   input,   width = 16,          .byteenable
		.av_burstcount         (pcie_rxm_bar2_translator_avalon_universal_master_0_burstcount),    //   input,   width = 10,          .burstcount
		.av_debugaccess        (pcie_rxm_bar2_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (pcie_rxm_bar2_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (pcie_rxm_bar2_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (pcie_rxm_bar2_agent_cp_data),                                      //  output,  width = 260,          .data
		.cp_startofpacket      (pcie_rxm_bar2_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (pcie_rxm_bar2_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (pcie_rxm_bar2_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                 //   input,  width = 260,          .data
		.rp_channel            (rsp_mux_src_channel),                                              //   input,    width = 1,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                //  output,    width = 1,          .ready
		.av_response           (),                                                                 // (terminated),                         
		.av_writeresponsevalid ()                                                                  // (terminated),                         
	);

	system_design_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (394),
		.PKT_ORI_BURST_SIZE_L      (392),
		.PKT_RESPONSE_STATUS_H     (391),
		.PKT_RESPONSE_STATUS_L     (390),
		.PKT_BURST_SIZE_H          (373),
		.PKT_BURST_SIZE_L          (371),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (378),
		.PKT_PROTECTION_H          (385),
		.PKT_PROTECTION_L          (383),
		.PKT_BURSTWRAP_H           (370),
		.PKT_BURSTWRAP_L           (370),
		.PKT_BYTE_CNT_H            (369),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (380),
		.PKT_SRC_ID_L              (380),
		.PKT_DEST_ID_H             (381),
		.PKT_DEST_ID_L             (381),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (404),
		.AVS_BURSTCOUNT_W          (12),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ddr3_ctrl_amm_0_agent (
		.clk                     (ddr3_emif_usr_clk_clk),                                        //   input,    width = 1,             clk.clk
		.reset                   (ddr3_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (ddr3_ctrl_amm_0_agent_m0_address),                             //  output,   width = 64,              m0.address
		.m0_burstcount           (ddr3_ctrl_amm_0_agent_m0_burstcount),                          //  output,   width = 12,                .burstcount
		.m0_byteenable           (ddr3_ctrl_amm_0_agent_m0_byteenable),                          //  output,   width = 32,                .byteenable
		.m0_debugaccess          (ddr3_ctrl_amm_0_agent_m0_debugaccess),                         //  output,    width = 1,                .debugaccess
		.m0_lock                 (ddr3_ctrl_amm_0_agent_m0_lock),                                //  output,    width = 1,                .lock
		.m0_readdata             (ddr3_ctrl_amm_0_agent_m0_readdata),                            //   input,  width = 256,                .readdata
		.m0_readdatavalid        (ddr3_ctrl_amm_0_agent_m0_readdatavalid),                       //   input,    width = 1,                .readdatavalid
		.m0_read                 (ddr3_ctrl_amm_0_agent_m0_read),                                //  output,    width = 1,                .read
		.m0_waitrequest          (ddr3_ctrl_amm_0_agent_m0_waitrequest),                         //   input,    width = 1,                .waitrequest
		.m0_writedata            (ddr3_ctrl_amm_0_agent_m0_writedata),                           //  output,  width = 256,                .writedata
		.m0_write                (ddr3_ctrl_amm_0_agent_m0_write),                               //  output,    width = 1,                .write
		.rp_endofpacket          (ddr3_ctrl_amm_0_agent_rp_endofpacket),                         //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ddr3_ctrl_amm_0_agent_rp_ready),                               //   input,    width = 1,                .ready
		.rp_valid                (ddr3_ctrl_amm_0_agent_rp_valid),                               //  output,    width = 1,                .valid
		.rp_data                 (ddr3_ctrl_amm_0_agent_rp_data),                                //  output,  width = 404,                .data
		.rp_startofpacket        (ddr3_ctrl_amm_0_agent_rp_startofpacket),                       //  output,    width = 1,                .startofpacket
		.cp_ready                (ddr3_ctrl_amm_0_cmd_width_adapter_src_ready),                  //  output,    width = 1,              cp.ready
		.cp_valid                (ddr3_ctrl_amm_0_cmd_width_adapter_src_valid),                  //   input,    width = 1,                .valid
		.cp_data                 (ddr3_ctrl_amm_0_cmd_width_adapter_src_data),                   //   input,  width = 404,                .data
		.cp_startofpacket        (ddr3_ctrl_amm_0_cmd_width_adapter_src_startofpacket),          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (ddr3_ctrl_amm_0_cmd_width_adapter_src_endofpacket),            //   input,    width = 1,                .endofpacket
		.cp_channel              (ddr3_ctrl_amm_0_cmd_width_adapter_src_channel),                //   input,    width = 1,                .channel
		.rf_sink_ready           (ddr3_ctrl_amm_0_agent_rsp_fifo_out_ready),                     //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ddr3_ctrl_amm_0_agent_rsp_fifo_out_valid),                     //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ddr3_ctrl_amm_0_agent_rsp_fifo_out_startofpacket),             //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ddr3_ctrl_amm_0_agent_rsp_fifo_out_endofpacket),               //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ddr3_ctrl_amm_0_agent_rsp_fifo_out_data),                      //   input,  width = 405,                .data
		.rf_source_ready         (ddr3_ctrl_amm_0_agent_rf_source_ready),                        //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ddr3_ctrl_amm_0_agent_rf_source_valid),                        //  output,    width = 1,                .valid
		.rf_source_startofpacket (ddr3_ctrl_amm_0_agent_rf_source_startofpacket),                //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ddr3_ctrl_amm_0_agent_rf_source_endofpacket),                  //  output,    width = 1,                .endofpacket
		.rf_source_data          (ddr3_ctrl_amm_0_agent_rf_source_data),                         //  output,  width = 405,                .data
		.rdata_fifo_sink_ready   (ddr3_ctrl_amm_0_agent_rdata_fifo_out_ready),                   //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ddr3_ctrl_amm_0_agent_rdata_fifo_out_valid),                   //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ddr3_ctrl_amm_0_agent_rdata_fifo_out_data),                    //   input,  width = 258,                .data
		.rdata_fifo_src_ready    (ddr3_ctrl_amm_0_agent_rdata_fifo_src_ready),                   //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr3_ctrl_amm_0_agent_rdata_fifo_src_valid),                   //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ddr3_ctrl_amm_0_agent_rdata_fifo_src_data),                    //  output,  width = 258,                .data
		.m0_response             (2'b00),                                                        // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                         // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                          // (terminated),                               
	);

	system_design_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (405),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) ddr3_ctrl_amm_0_agent_rsp_fifo (
		.clk               (ddr3_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset             (ddr3_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (ddr3_ctrl_amm_0_agent_rf_source_data),                         //   input,  width = 405,        in.data
		.in_valid          (ddr3_ctrl_amm_0_agent_rf_source_valid),                        //   input,    width = 1,          .valid
		.in_ready          (ddr3_ctrl_amm_0_agent_rf_source_ready),                        //  output,    width = 1,          .ready
		.in_startofpacket  (ddr3_ctrl_amm_0_agent_rf_source_startofpacket),                //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ddr3_ctrl_amm_0_agent_rf_source_endofpacket),                  //   input,    width = 1,          .endofpacket
		.out_data          (ddr3_ctrl_amm_0_agent_rsp_fifo_out_data),                      //  output,  width = 405,       out.data
		.out_valid         (ddr3_ctrl_amm_0_agent_rsp_fifo_out_valid),                     //  output,    width = 1,          .valid
		.out_ready         (ddr3_ctrl_amm_0_agent_rsp_fifo_out_ready),                     //   input,    width = 1,          .ready
		.out_startofpacket (ddr3_ctrl_amm_0_agent_rsp_fifo_out_startofpacket),             //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ddr3_ctrl_amm_0_agent_rsp_fifo_out_endofpacket),               //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated),                         
		.csr_read          (1'b0),                                                         // (terminated),                         
		.csr_write         (1'b0),                                                         // (terminated),                         
		.csr_readdata      (),                                                             // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated),                         
		.almost_full_data  (),                                                             // (terminated),                         
		.almost_empty_data (),                                                             // (terminated),                         
		.in_empty          (1'b0),                                                         // (terminated),                         
		.out_empty         (),                                                             // (terminated),                         
		.in_error          (1'b0),                                                         // (terminated),                         
		.out_error         (),                                                             // (terminated),                         
		.in_channel        (1'b0),                                                         // (terminated),                         
		.out_channel       ()                                                              // (terminated),                         
	);

	system_design_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (2048),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) ddr3_ctrl_amm_0_agent_rdata_fifo (
		.clk               (ddr3_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset             (ddr3_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (ddr3_ctrl_amm_0_agent_rdata_fifo_src_data),                    //   input,  width = 258,        in.data
		.in_valid          (ddr3_ctrl_amm_0_agent_rdata_fifo_src_valid),                   //   input,    width = 1,          .valid
		.in_ready          (ddr3_ctrl_amm_0_agent_rdata_fifo_src_ready),                   //  output,    width = 1,          .ready
		.out_data          (ddr3_ctrl_amm_0_agent_rdata_fifo_out_data),                    //  output,  width = 258,       out.data
		.out_valid         (ddr3_ctrl_amm_0_agent_rdata_fifo_out_valid),                   //  output,    width = 1,          .valid
		.out_ready         (ddr3_ctrl_amm_0_agent_rdata_fifo_out_ready),                   //   input,    width = 1,          .ready
		.csr_address       (2'b00),                                                        // (terminated),                         
		.csr_read          (1'b0),                                                         // (terminated),                         
		.csr_write         (1'b0),                                                         // (terminated),                         
		.csr_readdata      (),                                                             // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated),                         
		.almost_full_data  (),                                                             // (terminated),                         
		.almost_empty_data (),                                                             // (terminated),                         
		.in_startofpacket  (1'b0),                                                         // (terminated),                         
		.in_endofpacket    (1'b0),                                                         // (terminated),                         
		.out_startofpacket (),                                                             // (terminated),                         
		.out_endofpacket   (),                                                             // (terminated),                         
		.in_empty          (1'b0),                                                         // (terminated),                         
		.out_empty         (),                                                             // (terminated),                         
		.in_error          (1'b0),                                                         // (terminated),                         
		.out_error         (),                                                             // (terminated),                         
		.in_channel        (1'b0),                                                         // (terminated),                         
		.out_channel       ()                                                              // (terminated),                         
	);

	system_design_altera_merlin_router_1920_s3neloa router (
		.sink_ready         (pcie_rxm_bar2_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (pcie_rxm_bar2_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (pcie_rxm_bar2_agent_cp_data),                                //   input,  width = 260,          .data
		.sink_startofpacket (pcie_rxm_bar2_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (pcie_rxm_bar2_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (pcie_coreclkout_hip_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pcie_rxm_bar2_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                           //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                           //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                            //  output,  width = 260,          .data
		.src_channel        (router_src_channel),                                         //  output,    width = 1,          .channel
		.src_startofpacket  (router_src_startofpacket),                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                      //  output,    width = 1,          .endofpacket
	);

	system_design_altera_merlin_router_1920_dnqa6qi router_001 (
		.sink_ready         (ddr3_ctrl_amm_0_agent_rp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (ddr3_ctrl_amm_0_agent_rp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (ddr3_ctrl_amm_0_agent_rp_data),                                //   input,  width = 404,          .data
		.sink_startofpacket (ddr3_ctrl_amm_0_agent_rp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ddr3_ctrl_amm_0_agent_rp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (ddr3_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (ddr3_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                          //  output,  width = 404,          .data
		.src_channel        (router_001_src_channel),                                       //  output,    width = 1,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	system_design_altera_merlin_demultiplexer_1921_jqr5ujy cmd_demux (
		.clk                (pcie_coreclkout_hip_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pcie_rxm_bar2_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                         //   input,    width = 1,          .channel
		.sink_data          (router_src_data),                                            //   input,  width = 260,          .data
		.sink_startofpacket (router_src_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                           //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                       //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                       //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                        //  output,  width = 260,          .data
		.src0_channel       (cmd_demux_src0_channel),                                     //  output,    width = 1,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                  //  output,    width = 1,          .endofpacket
	);

	system_design_altera_merlin_multiplexer_1921_auog3yq cmd_mux (
		.clk                 (ddr3_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset               (ddr3_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                            //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                            //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                             //  output,  width = 260,          .data
		.src_channel         (cmd_mux_src_channel),                                          //  output,    width = 1,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                      //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_out_ready),                                            //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_out_valid),                                            //   input,    width = 1,          .valid
		.sink0_channel       (crosser_out_channel),                                          //   input,    width = 1,          .channel
		.sink0_data          (crosser_out_data),                                             //   input,  width = 260,          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                       //   input,    width = 1,          .endofpacket
	);

	system_design_altera_merlin_demultiplexer_1921_jqr5ujy rsp_demux (
		.clk                (ddr3_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (ddr3_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (ddr3_ctrl_amm_0_rsp_width_adapter_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (ddr3_ctrl_amm_0_rsp_width_adapter_src_channel),                //   input,    width = 1,          .channel
		.sink_data          (ddr3_ctrl_amm_0_rsp_width_adapter_src_data),                   //   input,  width = 260,          .data
		.sink_startofpacket (ddr3_ctrl_amm_0_rsp_width_adapter_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ddr3_ctrl_amm_0_rsp_width_adapter_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (ddr3_ctrl_amm_0_rsp_width_adapter_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                         //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                         //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                          //  output,  width = 260,          .data
		.src0_channel       (rsp_demux_src0_channel),                                       //  output,    width = 1,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	system_design_altera_merlin_multiplexer_1921_uukqcla rsp_mux (
		.clk                 (pcie_coreclkout_hip_clk),                                    //   input,    width = 1,       clk.clk
		.reset               (pcie_rxm_bar2_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                          //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                           //  output,  width = 260,          .data
		.src_channel         (rsp_mux_src_channel),                                        //  output,    width = 1,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                      //   input,    width = 1,          .valid
		.sink0_channel       (crosser_001_out_channel),                                    //   input,    width = 1,          .channel
		.sink0_data          (crosser_001_out_data),                                       //   input,  width = 260,          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	system_design_altera_merlin_width_adapter_1920_cgbsazy #(
		.IN_PKT_ADDR_H                 (207),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (225),
		.IN_PKT_BYTE_CNT_L             (214),
		.IN_PKT_TRANS_COMPRESSED_READ  (208),
		.IN_PKT_TRANS_WRITE            (210),
		.IN_PKT_BURSTWRAP_H            (226),
		.IN_PKT_BURSTWRAP_L            (226),
		.IN_PKT_BURST_SIZE_H           (229),
		.IN_PKT_BURST_SIZE_L           (227),
		.IN_PKT_RESPONSE_STATUS_H      (247),
		.IN_PKT_RESPONSE_STATUS_L      (246),
		.IN_PKT_TRANS_EXCLUSIVE        (213),
		.IN_PKT_BURST_TYPE_H           (231),
		.IN_PKT_BURST_TYPE_L           (230),
		.IN_PKT_ORI_BURST_SIZE_L       (248),
		.IN_PKT_ORI_BURST_SIZE_H       (250),
		.IN_ST_DATA_W                  (260),
		.OUT_PKT_ADDR_H                (351),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (369),
		.OUT_PKT_BYTE_CNT_L            (358),
		.OUT_PKT_TRANS_COMPRESSED_READ (352),
		.OUT_PKT_BURST_SIZE_H          (373),
		.OUT_PKT_BURST_SIZE_L          (371),
		.OUT_PKT_RESPONSE_STATUS_H     (391),
		.OUT_PKT_RESPONSE_STATUS_L     (390),
		.OUT_PKT_TRANS_EXCLUSIVE       (357),
		.OUT_PKT_BURST_TYPE_H          (375),
		.OUT_PKT_BURST_TYPE_L          (374),
		.OUT_PKT_ORI_BURST_SIZE_L      (392),
		.OUT_PKT_ORI_BURST_SIZE_H      (394),
		.OUT_ST_DATA_W                 (404),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) ddr3_ctrl_amm_0_cmd_width_adapter (
		.clk                  (ddr3_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (ddr3_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                            //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_src_channel),                                          //   input,    width = 1,          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                            //  output,    width = 1,          .ready
		.in_data              (cmd_mux_src_data),                                             //   input,  width = 260,          .data
		.out_endofpacket      (ddr3_ctrl_amm_0_cmd_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (ddr3_ctrl_amm_0_cmd_width_adapter_src_data),                   //  output,  width = 404,          .data
		.out_channel          (ddr3_ctrl_amm_0_cmd_width_adapter_src_channel),                //  output,    width = 1,          .channel
		.out_valid            (ddr3_ctrl_amm_0_cmd_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (ddr3_ctrl_amm_0_cmd_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (ddr3_ctrl_amm_0_cmd_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated),                         
	);

	system_design_altera_merlin_width_adapter_1920_tvac3wq #(
		.IN_PKT_ADDR_H                 (351),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (369),
		.IN_PKT_BYTE_CNT_L             (358),
		.IN_PKT_TRANS_COMPRESSED_READ  (352),
		.IN_PKT_TRANS_WRITE            (354),
		.IN_PKT_BURSTWRAP_H            (370),
		.IN_PKT_BURSTWRAP_L            (370),
		.IN_PKT_BURST_SIZE_H           (373),
		.IN_PKT_BURST_SIZE_L           (371),
		.IN_PKT_RESPONSE_STATUS_H      (391),
		.IN_PKT_RESPONSE_STATUS_L      (390),
		.IN_PKT_TRANS_EXCLUSIVE        (357),
		.IN_PKT_BURST_TYPE_H           (375),
		.IN_PKT_BURST_TYPE_L           (374),
		.IN_PKT_ORI_BURST_SIZE_L       (392),
		.IN_PKT_ORI_BURST_SIZE_H       (394),
		.IN_ST_DATA_W                  (404),
		.OUT_PKT_ADDR_H                (207),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (225),
		.OUT_PKT_BYTE_CNT_L            (214),
		.OUT_PKT_TRANS_COMPRESSED_READ (208),
		.OUT_PKT_BURST_SIZE_H          (229),
		.OUT_PKT_BURST_SIZE_L          (227),
		.OUT_PKT_RESPONSE_STATUS_H     (247),
		.OUT_PKT_RESPONSE_STATUS_L     (246),
		.OUT_PKT_TRANS_EXCLUSIVE       (213),
		.OUT_PKT_BURST_TYPE_H          (231),
		.OUT_PKT_BURST_TYPE_L          (230),
		.OUT_PKT_ORI_BURST_SIZE_L      (248),
		.OUT_PKT_ORI_BURST_SIZE_H      (250),
		.OUT_ST_DATA_W                 (260),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) ddr3_ctrl_amm_0_rsp_width_adapter (
		.clk                  (ddr3_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (ddr3_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (router_001_src_valid),                                         //   input,    width = 1,      sink.valid
		.in_channel           (router_001_src_channel),                                       //   input,    width = 1,          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.in_ready             (router_001_src_ready),                                         //  output,    width = 1,          .ready
		.in_data              (router_001_src_data),                                          //   input,  width = 404,          .data
		.out_endofpacket      (ddr3_ctrl_amm_0_rsp_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (ddr3_ctrl_amm_0_rsp_width_adapter_src_data),                   //  output,  width = 260,          .data
		.out_channel          (ddr3_ctrl_amm_0_rsp_width_adapter_src_channel),                //  output,    width = 1,          .channel
		.out_valid            (ddr3_ctrl_amm_0_rsp_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (ddr3_ctrl_amm_0_rsp_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (ddr3_ctrl_amm_0_rsp_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated),                         
	);

	system_design_hs_clk_xer_1931_amqtl4y #(
		.DATA_WIDTH          (260),
		.BITS_PER_SYMBOL     (260),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser (
		.in_clk            (pcie_coreclkout_hip_clk),                                      //   input,    width = 1,        in_clk.clk
		.in_reset          (pcie_rxm_bar2_translator_reset_reset_bridge_in_reset_reset),   //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (ddr3_emif_usr_clk_clk),                                        //   input,    width = 1,       out_clk.clk
		.out_reset         (ddr3_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                         //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src0_valid),                                         //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                 //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                   //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                       //   input,    width = 1,              .channel
		.in_data           (cmd_demux_src0_data),                                          //   input,  width = 260,              .data
		.out_ready         (crosser_out_ready),                                            //   input,    width = 1,           out.ready
		.out_valid         (crosser_out_valid),                                            //  output,    width = 1,              .valid
		.out_startofpacket (crosser_out_startofpacket),                                    //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                      //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_out_channel),                                          //  output,    width = 1,              .channel
		.out_data          (crosser_out_data),                                             //  output,  width = 260,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	system_design_hs_clk_xer_1931_amqtl4y #(
		.DATA_WIDTH          (260),
		.BITS_PER_SYMBOL     (260),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_001 (
		.in_clk            (ddr3_emif_usr_clk_clk),                                        //   input,    width = 1,        in_clk.clk
		.in_reset          (ddr3_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (pcie_coreclkout_hip_clk),                                      //   input,    width = 1,       out_clk.clk
		.out_reset         (pcie_rxm_bar2_translator_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                         //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_src0_valid),                                         //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                 //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                   //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                       //   input,    width = 1,              .channel
		.in_data           (rsp_demux_src0_data),                                          //   input,  width = 260,              .data
		.out_ready         (crosser_001_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_001_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_001_out_channel),                                      //  output,    width = 1,              .channel
		.out_data          (crosser_001_out_data),                                         //  output,  width = 260,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

endmodule
