// system_design_altera_mm_interconnect_1920_huko6ri.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 21.3 170

`timescale 1 ps / 1 ps
module system_design_altera_mm_interconnect_1920_huko6ri (
		input  wire [9:0]  send_packet_2_avalon_master_address,                //                  send_packet_2_avalon_master.address
		output wire        send_packet_2_avalon_master_waitrequest,            //                                             .waitrequest
		input  wire [3:0]  send_packet_2_avalon_master_byteenable,             //                                             .byteenable
		input  wire        send_packet_2_avalon_master_chipselect,             //                                             .chipselect
		output wire [31:0] send_packet_2_avalon_master_readdata,               //                                             .readdata
		input  wire        send_packet_2_avalon_master_write,                  //                                             .write
		input  wire [31:0] send_packet_2_avalon_master_writedata,              //                                             .writedata
		input  wire [9:0]  receive_packet_2_avalon_master_address,             //               receive_packet_2_avalon_master.address
		output wire        receive_packet_2_avalon_master_waitrequest,         //                                             .waitrequest
		input  wire [3:0]  receive_packet_2_avalon_master_byteenable,          //                                             .byteenable
		input  wire        receive_packet_2_avalon_master_chipselect,          //                                             .chipselect
		output wire [31:0] receive_packet_2_avalon_master_readdata,            //                                             .readdata
		input  wire        receive_packet_2_avalon_master_write,               //                                             .write
		input  wire [31:0] receive_packet_2_avalon_master_writedata,           //                                             .writedata
		output wire [9:0]  mem_2_s1_address,                                   //                                     mem_2_s1.address
		output wire        mem_2_s1_write,                                     //                                             .write
		input  wire [31:0] mem_2_s1_readdata,                                  //                                             .readdata
		output wire [31:0] mem_2_s1_writedata,                                 //                                             .writedata
		output wire [3:0]  mem_2_s1_byteenable,                                //                                             .byteenable
		input  wire        mem_2_s1_waitrequest,                               //                                             .waitrequest
		output wire        mem_2_s1_chipselect,                                //                                             .chipselect
		output wire        mem_2_s1_clken,                                     //                                             .clken
		input  wire        send_packet_2_reset_reset_bridge_in_reset_reset,    //    send_packet_2_reset_reset_bridge_in_reset.reset
		input  wire        receive_packet_2_reset_reset_bridge_in_reset_reset, // receive_packet_2_reset_reset_bridge_in_reset.reset
		input  wire        tse_mac_tx_clock_connection_1_clk,                  //                tse_mac_tx_clock_connection_1.clk
		input  wire        tse_mac_rx_clock_connection_1_clk                   //                tse_mac_rx_clock_connection_1.clk
	);

	wire         send_packet_2_avalon_master_translator_avalon_universal_master_0_waitrequest;      // send_packet_2_avalon_master_agent:av_waitrequest -> send_packet_2_avalon_master_translator:uav_waitrequest
	wire  [31:0] send_packet_2_avalon_master_translator_avalon_universal_master_0_readdata;         // send_packet_2_avalon_master_agent:av_readdata -> send_packet_2_avalon_master_translator:uav_readdata
	wire         send_packet_2_avalon_master_translator_avalon_universal_master_0_debugaccess;      // send_packet_2_avalon_master_translator:uav_debugaccess -> send_packet_2_avalon_master_agent:av_debugaccess
	wire  [11:0] send_packet_2_avalon_master_translator_avalon_universal_master_0_address;          // send_packet_2_avalon_master_translator:uav_address -> send_packet_2_avalon_master_agent:av_address
	wire         send_packet_2_avalon_master_translator_avalon_universal_master_0_read;             // send_packet_2_avalon_master_translator:uav_read -> send_packet_2_avalon_master_agent:av_read
	wire   [3:0] send_packet_2_avalon_master_translator_avalon_universal_master_0_byteenable;       // send_packet_2_avalon_master_translator:uav_byteenable -> send_packet_2_avalon_master_agent:av_byteenable
	wire         send_packet_2_avalon_master_translator_avalon_universal_master_0_readdatavalid;    // send_packet_2_avalon_master_agent:av_readdatavalid -> send_packet_2_avalon_master_translator:uav_readdatavalid
	wire         send_packet_2_avalon_master_translator_avalon_universal_master_0_lock;             // send_packet_2_avalon_master_translator:uav_lock -> send_packet_2_avalon_master_agent:av_lock
	wire         send_packet_2_avalon_master_translator_avalon_universal_master_0_write;            // send_packet_2_avalon_master_translator:uav_write -> send_packet_2_avalon_master_agent:av_write
	wire  [31:0] send_packet_2_avalon_master_translator_avalon_universal_master_0_writedata;        // send_packet_2_avalon_master_translator:uav_writedata -> send_packet_2_avalon_master_agent:av_writedata
	wire   [2:0] send_packet_2_avalon_master_translator_avalon_universal_master_0_burstcount;       // send_packet_2_avalon_master_translator:uav_burstcount -> send_packet_2_avalon_master_agent:av_burstcount
	wire         rsp_mux_src_valid;                                                                 // rsp_mux:src_valid -> send_packet_2_avalon_master_agent:rp_valid
	wire  [90:0] rsp_mux_src_data;                                                                  // rsp_mux:src_data -> send_packet_2_avalon_master_agent:rp_data
	wire         rsp_mux_src_ready;                                                                 // send_packet_2_avalon_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [1:0] rsp_mux_src_channel;                                                               // rsp_mux:src_channel -> send_packet_2_avalon_master_agent:rp_channel
	wire         rsp_mux_src_startofpacket;                                                         // rsp_mux:src_startofpacket -> send_packet_2_avalon_master_agent:rp_startofpacket
	wire         rsp_mux_src_endofpacket;                                                           // rsp_mux:src_endofpacket -> send_packet_2_avalon_master_agent:rp_endofpacket
	wire         receive_packet_2_avalon_master_translator_avalon_universal_master_0_waitrequest;   // receive_packet_2_avalon_master_agent:av_waitrequest -> receive_packet_2_avalon_master_translator:uav_waitrequest
	wire  [31:0] receive_packet_2_avalon_master_translator_avalon_universal_master_0_readdata;      // receive_packet_2_avalon_master_agent:av_readdata -> receive_packet_2_avalon_master_translator:uav_readdata
	wire         receive_packet_2_avalon_master_translator_avalon_universal_master_0_debugaccess;   // receive_packet_2_avalon_master_translator:uav_debugaccess -> receive_packet_2_avalon_master_agent:av_debugaccess
	wire  [11:0] receive_packet_2_avalon_master_translator_avalon_universal_master_0_address;       // receive_packet_2_avalon_master_translator:uav_address -> receive_packet_2_avalon_master_agent:av_address
	wire         receive_packet_2_avalon_master_translator_avalon_universal_master_0_read;          // receive_packet_2_avalon_master_translator:uav_read -> receive_packet_2_avalon_master_agent:av_read
	wire   [3:0] receive_packet_2_avalon_master_translator_avalon_universal_master_0_byteenable;    // receive_packet_2_avalon_master_translator:uav_byteenable -> receive_packet_2_avalon_master_agent:av_byteenable
	wire         receive_packet_2_avalon_master_translator_avalon_universal_master_0_readdatavalid; // receive_packet_2_avalon_master_agent:av_readdatavalid -> receive_packet_2_avalon_master_translator:uav_readdatavalid
	wire         receive_packet_2_avalon_master_translator_avalon_universal_master_0_lock;          // receive_packet_2_avalon_master_translator:uav_lock -> receive_packet_2_avalon_master_agent:av_lock
	wire         receive_packet_2_avalon_master_translator_avalon_universal_master_0_write;         // receive_packet_2_avalon_master_translator:uav_write -> receive_packet_2_avalon_master_agent:av_write
	wire  [31:0] receive_packet_2_avalon_master_translator_avalon_universal_master_0_writedata;     // receive_packet_2_avalon_master_translator:uav_writedata -> receive_packet_2_avalon_master_agent:av_writedata
	wire   [2:0] receive_packet_2_avalon_master_translator_avalon_universal_master_0_burstcount;    // receive_packet_2_avalon_master_translator:uav_burstcount -> receive_packet_2_avalon_master_agent:av_burstcount
	wire         rsp_mux_001_src_valid;                                                             // rsp_mux_001:src_valid -> receive_packet_2_avalon_master_agent:rp_valid
	wire  [90:0] rsp_mux_001_src_data;                                                              // rsp_mux_001:src_data -> receive_packet_2_avalon_master_agent:rp_data
	wire         rsp_mux_001_src_ready;                                                             // receive_packet_2_avalon_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [1:0] rsp_mux_001_src_channel;                                                           // rsp_mux_001:src_channel -> receive_packet_2_avalon_master_agent:rp_channel
	wire         rsp_mux_001_src_startofpacket;                                                     // rsp_mux_001:src_startofpacket -> receive_packet_2_avalon_master_agent:rp_startofpacket
	wire         rsp_mux_001_src_endofpacket;                                                       // rsp_mux_001:src_endofpacket -> receive_packet_2_avalon_master_agent:rp_endofpacket
	wire  [31:0] mem_2_s1_agent_m0_readdata;                                                        // mem_2_s1_translator:uav_readdata -> mem_2_s1_agent:m0_readdata
	wire         mem_2_s1_agent_m0_waitrequest;                                                     // mem_2_s1_translator:uav_waitrequest -> mem_2_s1_agent:m0_waitrequest
	wire         mem_2_s1_agent_m0_debugaccess;                                                     // mem_2_s1_agent:m0_debugaccess -> mem_2_s1_translator:uav_debugaccess
	wire  [11:0] mem_2_s1_agent_m0_address;                                                         // mem_2_s1_agent:m0_address -> mem_2_s1_translator:uav_address
	wire   [3:0] mem_2_s1_agent_m0_byteenable;                                                      // mem_2_s1_agent:m0_byteenable -> mem_2_s1_translator:uav_byteenable
	wire         mem_2_s1_agent_m0_read;                                                            // mem_2_s1_agent:m0_read -> mem_2_s1_translator:uav_read
	wire         mem_2_s1_agent_m0_readdatavalid;                                                   // mem_2_s1_translator:uav_readdatavalid -> mem_2_s1_agent:m0_readdatavalid
	wire         mem_2_s1_agent_m0_lock;                                                            // mem_2_s1_agent:m0_lock -> mem_2_s1_translator:uav_lock
	wire  [31:0] mem_2_s1_agent_m0_writedata;                                                       // mem_2_s1_agent:m0_writedata -> mem_2_s1_translator:uav_writedata
	wire         mem_2_s1_agent_m0_write;                                                           // mem_2_s1_agent:m0_write -> mem_2_s1_translator:uav_write
	wire   [2:0] mem_2_s1_agent_m0_burstcount;                                                      // mem_2_s1_agent:m0_burstcount -> mem_2_s1_translator:uav_burstcount
	wire         mem_2_s1_agent_rf_source_valid;                                                    // mem_2_s1_agent:rf_source_valid -> mem_2_s1_agent_rsp_fifo:in_valid
	wire  [91:0] mem_2_s1_agent_rf_source_data;                                                     // mem_2_s1_agent:rf_source_data -> mem_2_s1_agent_rsp_fifo:in_data
	wire         mem_2_s1_agent_rf_source_ready;                                                    // mem_2_s1_agent_rsp_fifo:in_ready -> mem_2_s1_agent:rf_source_ready
	wire         mem_2_s1_agent_rf_source_startofpacket;                                            // mem_2_s1_agent:rf_source_startofpacket -> mem_2_s1_agent_rsp_fifo:in_startofpacket
	wire         mem_2_s1_agent_rf_source_endofpacket;                                              // mem_2_s1_agent:rf_source_endofpacket -> mem_2_s1_agent_rsp_fifo:in_endofpacket
	wire         mem_2_s1_agent_rsp_fifo_out_valid;                                                 // mem_2_s1_agent_rsp_fifo:out_valid -> mem_2_s1_agent:rf_sink_valid
	wire  [91:0] mem_2_s1_agent_rsp_fifo_out_data;                                                  // mem_2_s1_agent_rsp_fifo:out_data -> mem_2_s1_agent:rf_sink_data
	wire         mem_2_s1_agent_rsp_fifo_out_ready;                                                 // mem_2_s1_agent:rf_sink_ready -> mem_2_s1_agent_rsp_fifo:out_ready
	wire         mem_2_s1_agent_rsp_fifo_out_startofpacket;                                         // mem_2_s1_agent_rsp_fifo:out_startofpacket -> mem_2_s1_agent:rf_sink_startofpacket
	wire         mem_2_s1_agent_rsp_fifo_out_endofpacket;                                           // mem_2_s1_agent_rsp_fifo:out_endofpacket -> mem_2_s1_agent:rf_sink_endofpacket
	wire         mem_2_s1_agent_rdata_fifo_src_valid;                                               // mem_2_s1_agent:rdata_fifo_src_valid -> mem_2_s1_agent_rdata_fifo:in_valid
	wire  [33:0] mem_2_s1_agent_rdata_fifo_src_data;                                                // mem_2_s1_agent:rdata_fifo_src_data -> mem_2_s1_agent_rdata_fifo:in_data
	wire         mem_2_s1_agent_rdata_fifo_src_ready;                                               // mem_2_s1_agent_rdata_fifo:in_ready -> mem_2_s1_agent:rdata_fifo_src_ready
	wire         mem_2_s1_agent_rdata_fifo_out_valid;                                               // mem_2_s1_agent_rdata_fifo:out_valid -> mem_2_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] mem_2_s1_agent_rdata_fifo_out_data;                                                // mem_2_s1_agent_rdata_fifo:out_data -> mem_2_s1_agent:rdata_fifo_sink_data
	wire         mem_2_s1_agent_rdata_fifo_out_ready;                                               // mem_2_s1_agent:rdata_fifo_sink_ready -> mem_2_s1_agent_rdata_fifo:out_ready
	wire         cmd_mux_src_valid;                                                                 // cmd_mux:src_valid -> mem_2_s1_agent:cp_valid
	wire  [90:0] cmd_mux_src_data;                                                                  // cmd_mux:src_data -> mem_2_s1_agent:cp_data
	wire         cmd_mux_src_ready;                                                                 // mem_2_s1_agent:cp_ready -> cmd_mux:src_ready
	wire   [1:0] cmd_mux_src_channel;                                                               // cmd_mux:src_channel -> mem_2_s1_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                         // cmd_mux:src_startofpacket -> mem_2_s1_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                           // cmd_mux:src_endofpacket -> mem_2_s1_agent:cp_endofpacket
	wire         send_packet_2_avalon_master_agent_cp_valid;                                        // send_packet_2_avalon_master_agent:cp_valid -> router:sink_valid
	wire  [90:0] send_packet_2_avalon_master_agent_cp_data;                                         // send_packet_2_avalon_master_agent:cp_data -> router:sink_data
	wire         send_packet_2_avalon_master_agent_cp_ready;                                        // router:sink_ready -> send_packet_2_avalon_master_agent:cp_ready
	wire         send_packet_2_avalon_master_agent_cp_startofpacket;                                // send_packet_2_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire         send_packet_2_avalon_master_agent_cp_endofpacket;                                  // send_packet_2_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         router_src_valid;                                                                  // router:src_valid -> cmd_demux:sink_valid
	wire  [90:0] router_src_data;                                                                   // router:src_data -> cmd_demux:sink_data
	wire         router_src_ready;                                                                  // cmd_demux:sink_ready -> router:src_ready
	wire   [1:0] router_src_channel;                                                                // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_startofpacket;                                                          // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire         router_src_endofpacket;                                                            // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         receive_packet_2_avalon_master_agent_cp_valid;                                     // receive_packet_2_avalon_master_agent:cp_valid -> router_001:sink_valid
	wire  [90:0] receive_packet_2_avalon_master_agent_cp_data;                                      // receive_packet_2_avalon_master_agent:cp_data -> router_001:sink_data
	wire         receive_packet_2_avalon_master_agent_cp_ready;                                     // router_001:sink_ready -> receive_packet_2_avalon_master_agent:cp_ready
	wire         receive_packet_2_avalon_master_agent_cp_startofpacket;                             // receive_packet_2_avalon_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire         receive_packet_2_avalon_master_agent_cp_endofpacket;                               // receive_packet_2_avalon_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                              // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [90:0] router_001_src_data;                                                               // router_001:src_data -> cmd_demux_001:sink_data
	wire         router_001_src_ready;                                                              // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [1:0] router_001_src_channel;                                                            // router_001:src_channel -> cmd_demux_001:sink_channel
	wire         router_001_src_startofpacket;                                                      // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire         router_001_src_endofpacket;                                                        // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         mem_2_s1_agent_rp_valid;                                                           // mem_2_s1_agent:rp_valid -> router_002:sink_valid
	wire  [90:0] mem_2_s1_agent_rp_data;                                                            // mem_2_s1_agent:rp_data -> router_002:sink_data
	wire         mem_2_s1_agent_rp_ready;                                                           // router_002:sink_ready -> mem_2_s1_agent:rp_ready
	wire         mem_2_s1_agent_rp_startofpacket;                                                   // mem_2_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         mem_2_s1_agent_rp_endofpacket;                                                     // mem_2_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                              // router_002:src_valid -> rsp_demux:sink_valid
	wire  [90:0] router_002_src_data;                                                               // router_002:src_data -> rsp_demux:sink_data
	wire         router_002_src_ready;                                                              // rsp_demux:sink_ready -> router_002:src_ready
	wire   [1:0] router_002_src_channel;                                                            // router_002:src_channel -> rsp_demux:sink_channel
	wire         router_002_src_startofpacket;                                                      // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_002_src_endofpacket;                                                        // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         cmd_demux_src0_valid;                                                              // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [90:0] cmd_demux_src0_data;                                                               // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                              // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [1:0] cmd_demux_src0_channel;                                                            // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                      // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                        // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                              // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [90:0] rsp_demux_src0_data;                                                               // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                              // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [1:0] rsp_demux_src0_channel;                                                            // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                      // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                        // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         cmd_demux_001_src0_valid;                                                          // cmd_demux_001:src0_valid -> crosser:in_valid
	wire  [90:0] cmd_demux_001_src0_data;                                                           // cmd_demux_001:src0_data -> crosser:in_data
	wire         cmd_demux_001_src0_ready;                                                          // crosser:in_ready -> cmd_demux_001:src0_ready
	wire   [1:0] cmd_demux_001_src0_channel;                                                        // cmd_demux_001:src0_channel -> crosser:in_channel
	wire         cmd_demux_001_src0_startofpacket;                                                  // cmd_demux_001:src0_startofpacket -> crosser:in_startofpacket
	wire         cmd_demux_001_src0_endofpacket;                                                    // cmd_demux_001:src0_endofpacket -> crosser:in_endofpacket
	wire         crosser_out_valid;                                                                 // crosser:out_valid -> cmd_mux:sink1_valid
	wire  [90:0] crosser_out_data;                                                                  // crosser:out_data -> cmd_mux:sink1_data
	wire         crosser_out_ready;                                                                 // cmd_mux:sink1_ready -> crosser:out_ready
	wire   [1:0] crosser_out_channel;                                                               // crosser:out_channel -> cmd_mux:sink1_channel
	wire         crosser_out_startofpacket;                                                         // crosser:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire         crosser_out_endofpacket;                                                           // crosser:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire         rsp_demux_src1_valid;                                                              // rsp_demux:src1_valid -> crosser_001:in_valid
	wire  [90:0] rsp_demux_src1_data;                                                               // rsp_demux:src1_data -> crosser_001:in_data
	wire         rsp_demux_src1_ready;                                                              // crosser_001:in_ready -> rsp_demux:src1_ready
	wire   [1:0] rsp_demux_src1_channel;                                                            // rsp_demux:src1_channel -> crosser_001:in_channel
	wire         rsp_demux_src1_startofpacket;                                                      // rsp_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire         rsp_demux_src1_endofpacket;                                                        // rsp_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire         crosser_001_out_valid;                                                             // crosser_001:out_valid -> rsp_mux_001:sink0_valid
	wire  [90:0] crosser_001_out_data;                                                              // crosser_001:out_data -> rsp_mux_001:sink0_data
	wire         crosser_001_out_ready;                                                             // rsp_mux_001:sink0_ready -> crosser_001:out_ready
	wire   [1:0] crosser_001_out_channel;                                                           // crosser_001:out_channel -> rsp_mux_001:sink0_channel
	wire         crosser_001_out_startofpacket;                                                     // crosser_001:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire         crosser_001_out_endofpacket;                                                       // crosser_001:out_endofpacket -> rsp_mux_001:sink0_endofpacket

	system_design_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (10),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (12),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) send_packet_2_avalon_master_translator (
		.clk                    (tse_mac_tx_clock_connection_1_clk),                                              //   input,   width = 1,                       clk.clk
		.reset                  (send_packet_2_reset_reset_bridge_in_reset_reset),                                //   input,   width = 1,                     reset.reset
		.uav_address            (send_packet_2_avalon_master_translator_avalon_universal_master_0_address),       //  output,  width = 12, avalon_universal_master_0.address
		.uav_burstcount         (send_packet_2_avalon_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (send_packet_2_avalon_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (send_packet_2_avalon_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (send_packet_2_avalon_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (send_packet_2_avalon_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (send_packet_2_avalon_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (send_packet_2_avalon_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (send_packet_2_avalon_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (send_packet_2_avalon_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (send_packet_2_avalon_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (send_packet_2_avalon_master_address),                                            //   input,  width = 10,      avalon_anti_master_0.address
		.av_waitrequest         (send_packet_2_avalon_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (send_packet_2_avalon_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_chipselect          (send_packet_2_avalon_master_chipselect),                                         //   input,   width = 1,                          .chipselect
		.av_readdata            (send_packet_2_avalon_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_write               (send_packet_2_avalon_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (send_packet_2_avalon_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                           // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                           // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                           // (terminated),                                        
		.av_read                (1'b0),                                                                           // (terminated),                                        
		.av_readdatavalid       (),                                                                               // (terminated),                                        
		.av_lock                (1'b0),                                                                           // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                           // (terminated),                                        
		.uav_clken              (),                                                                               // (terminated),                                        
		.av_clken               (1'b1),                                                                           // (terminated),                                        
		.uav_response           (2'b00),                                                                          // (terminated),                                        
		.av_response            (),                                                                               // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                           // (terminated),                                        
		.av_writeresponsevalid  ()                                                                                // (terminated),                                        
	);

	system_design_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (10),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (12),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) receive_packet_2_avalon_master_translator (
		.clk                    (tse_mac_rx_clock_connection_1_clk),                                                 //   input,   width = 1,                       clk.clk
		.reset                  (receive_packet_2_reset_reset_bridge_in_reset_reset),                                //   input,   width = 1,                     reset.reset
		.uav_address            (receive_packet_2_avalon_master_translator_avalon_universal_master_0_address),       //  output,  width = 12, avalon_universal_master_0.address
		.uav_burstcount         (receive_packet_2_avalon_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (receive_packet_2_avalon_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (receive_packet_2_avalon_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (receive_packet_2_avalon_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (receive_packet_2_avalon_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (receive_packet_2_avalon_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (receive_packet_2_avalon_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (receive_packet_2_avalon_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (receive_packet_2_avalon_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (receive_packet_2_avalon_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (receive_packet_2_avalon_master_address),                                            //   input,  width = 10,      avalon_anti_master_0.address
		.av_waitrequest         (receive_packet_2_avalon_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (receive_packet_2_avalon_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_chipselect          (receive_packet_2_avalon_master_chipselect),                                         //   input,   width = 1,                          .chipselect
		.av_readdata            (receive_packet_2_avalon_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_write               (receive_packet_2_avalon_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (receive_packet_2_avalon_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                              // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                              // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                              // (terminated),                                        
		.av_read                (1'b0),                                                                              // (terminated),                                        
		.av_readdatavalid       (),                                                                                  // (terminated),                                        
		.av_lock                (1'b0),                                                                              // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                              // (terminated),                                        
		.uav_clken              (),                                                                                  // (terminated),                                        
		.av_clken               (1'b1),                                                                              // (terminated),                                        
		.uav_response           (2'b00),                                                                             // (terminated),                                        
		.av_response            (),                                                                                  // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                              // (terminated),                                        
		.av_writeresponsevalid  ()                                                                                   // (terminated),                                        
	);

	system_design_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (12),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mem_2_s1_translator (
		.clk                    (tse_mac_tx_clock_connection_1_clk),               //   input,   width = 1,                      clk.clk
		.reset                  (send_packet_2_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mem_2_s1_agent_m0_address),                       //   input,  width = 12, avalon_universal_slave_0.address
		.uav_burstcount         (mem_2_s1_agent_m0_burstcount),                    //   input,   width = 3,                         .burstcount
		.uav_read               (mem_2_s1_agent_m0_read),                          //   input,   width = 1,                         .read
		.uav_write              (mem_2_s1_agent_m0_write),                         //   input,   width = 1,                         .write
		.uav_waitrequest        (mem_2_s1_agent_m0_waitrequest),                   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mem_2_s1_agent_m0_readdatavalid),                 //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mem_2_s1_agent_m0_byteenable),                    //   input,   width = 4,                         .byteenable
		.uav_readdata           (mem_2_s1_agent_m0_readdata),                      //  output,  width = 32,                         .readdata
		.uav_writedata          (mem_2_s1_agent_m0_writedata),                     //   input,  width = 32,                         .writedata
		.uav_lock               (mem_2_s1_agent_m0_lock),                          //   input,   width = 1,                         .lock
		.uav_debugaccess        (mem_2_s1_agent_m0_debugaccess),                   //   input,   width = 1,                         .debugaccess
		.av_address             (mem_2_s1_address),                                //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (mem_2_s1_write),                                  //  output,   width = 1,                         .write
		.av_readdata            (mem_2_s1_readdata),                               //   input,  width = 32,                         .readdata
		.av_writedata           (mem_2_s1_writedata),                              //  output,  width = 32,                         .writedata
		.av_byteenable          (mem_2_s1_byteenable),                             //  output,   width = 4,                         .byteenable
		.av_waitrequest         (mem_2_s1_waitrequest),                            //   input,   width = 1,                         .waitrequest
		.av_chipselect          (mem_2_s1_chipselect),                             //  output,   width = 1,                         .chipselect
		.av_clken               (mem_2_s1_clken),                                  //  output,   width = 1,                         .clken
		.av_read                (),                                                // (terminated),                                       
		.av_begintransfer       (),                                                // (terminated),                                       
		.av_beginbursttransfer  (),                                                // (terminated),                                       
		.av_burstcount          (),                                                // (terminated),                                       
		.av_readdatavalid       (1'b0),                                            // (terminated),                                       
		.av_writebyteenable     (),                                                // (terminated),                                       
		.av_lock                (),                                                // (terminated),                                       
		.uav_clken              (1'b0),                                            // (terminated),                                       
		.av_debugaccess         (),                                                // (terminated),                                       
		.av_outputenable        (),                                                // (terminated),                                       
		.uav_response           (),                                                // (terminated),                                       
		.av_response            (2'b00),                                           // (terminated),                                       
		.uav_writeresponsevalid (),                                                // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                             // (terminated),                                       
	);

	system_design_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (90),
		.PKT_DOMAIN_H              (89),
		.PKT_DOMAIN_L              (88),
		.PKT_SNOOP_H               (87),
		.PKT_SNOOP_L               (84),
		.PKT_BARRIER_H             (83),
		.PKT_BARRIER_L             (82),
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_QOS_H                 (66),
		.PKT_QOS_L                 (66),
		.PKT_DATA_SIDEBAND_H       (64),
		.PKT_DATA_SIDEBAND_L       (64),
		.PKT_ADDR_SIDEBAND_H       (63),
		.PKT_ADDR_SIDEBAND_L       (63),
		.PKT_BURST_TYPE_H          (62),
		.PKT_BURST_TYPE_L          (61),
		.PKT_CACHE_H               (76),
		.PKT_CACHE_L               (73),
		.PKT_THREAD_ID_H           (69),
		.PKT_THREAD_ID_L           (69),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_EXCLUSIVE       (53),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (68),
		.ST_DATA_W                 (91),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) send_packet_2_avalon_master_agent (
		.clk                   (tse_mac_tx_clock_connection_1_clk),                                              //   input,   width = 1,       clk.clk
		.reset                 (send_packet_2_reset_reset_bridge_in_reset_reset),                                //   input,   width = 1, clk_reset.reset
		.av_address            (send_packet_2_avalon_master_translator_avalon_universal_master_0_address),       //   input,  width = 12,        av.address
		.av_write              (send_packet_2_avalon_master_translator_avalon_universal_master_0_write),         //   input,   width = 1,          .write
		.av_read               (send_packet_2_avalon_master_translator_avalon_universal_master_0_read),          //   input,   width = 1,          .read
		.av_writedata          (send_packet_2_avalon_master_translator_avalon_universal_master_0_writedata),     //   input,  width = 32,          .writedata
		.av_readdata           (send_packet_2_avalon_master_translator_avalon_universal_master_0_readdata),      //  output,  width = 32,          .readdata
		.av_waitrequest        (send_packet_2_avalon_master_translator_avalon_universal_master_0_waitrequest),   //  output,   width = 1,          .waitrequest
		.av_readdatavalid      (send_packet_2_avalon_master_translator_avalon_universal_master_0_readdatavalid), //  output,   width = 1,          .readdatavalid
		.av_byteenable         (send_packet_2_avalon_master_translator_avalon_universal_master_0_byteenable),    //   input,   width = 4,          .byteenable
		.av_burstcount         (send_packet_2_avalon_master_translator_avalon_universal_master_0_burstcount),    //   input,   width = 3,          .burstcount
		.av_debugaccess        (send_packet_2_avalon_master_translator_avalon_universal_master_0_debugaccess),   //   input,   width = 1,          .debugaccess
		.av_lock               (send_packet_2_avalon_master_translator_avalon_universal_master_0_lock),          //   input,   width = 1,          .lock
		.cp_valid              (send_packet_2_avalon_master_agent_cp_valid),                                     //  output,   width = 1,        cp.valid
		.cp_data               (send_packet_2_avalon_master_agent_cp_data),                                      //  output,  width = 91,          .data
		.cp_startofpacket      (send_packet_2_avalon_master_agent_cp_startofpacket),                             //  output,   width = 1,          .startofpacket
		.cp_endofpacket        (send_packet_2_avalon_master_agent_cp_endofpacket),                               //  output,   width = 1,          .endofpacket
		.cp_ready              (send_packet_2_avalon_master_agent_cp_ready),                                     //   input,   width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                              //   input,   width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                               //   input,  width = 91,          .data
		.rp_channel            (rsp_mux_src_channel),                                                            //   input,   width = 2,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                      //   input,   width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                        //   input,   width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                              //  output,   width = 1,          .ready
		.av_response           (),                                                                               // (terminated),                        
		.av_writeresponsevalid ()                                                                                // (terminated),                        
	);

	system_design_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (90),
		.PKT_DOMAIN_H              (89),
		.PKT_DOMAIN_L              (88),
		.PKT_SNOOP_H               (87),
		.PKT_SNOOP_L               (84),
		.PKT_BARRIER_H             (83),
		.PKT_BARRIER_L             (82),
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_QOS_H                 (66),
		.PKT_QOS_L                 (66),
		.PKT_DATA_SIDEBAND_H       (64),
		.PKT_DATA_SIDEBAND_L       (64),
		.PKT_ADDR_SIDEBAND_H       (63),
		.PKT_ADDR_SIDEBAND_L       (63),
		.PKT_BURST_TYPE_H          (62),
		.PKT_BURST_TYPE_L          (61),
		.PKT_CACHE_H               (76),
		.PKT_CACHE_L               (73),
		.PKT_THREAD_ID_H           (69),
		.PKT_THREAD_ID_L           (69),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_EXCLUSIVE       (53),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (68),
		.ST_DATA_W                 (91),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) receive_packet_2_avalon_master_agent (
		.clk                   (tse_mac_rx_clock_connection_1_clk),                                                 //   input,   width = 1,       clk.clk
		.reset                 (receive_packet_2_reset_reset_bridge_in_reset_reset),                                //   input,   width = 1, clk_reset.reset
		.av_address            (receive_packet_2_avalon_master_translator_avalon_universal_master_0_address),       //   input,  width = 12,        av.address
		.av_write              (receive_packet_2_avalon_master_translator_avalon_universal_master_0_write),         //   input,   width = 1,          .write
		.av_read               (receive_packet_2_avalon_master_translator_avalon_universal_master_0_read),          //   input,   width = 1,          .read
		.av_writedata          (receive_packet_2_avalon_master_translator_avalon_universal_master_0_writedata),     //   input,  width = 32,          .writedata
		.av_readdata           (receive_packet_2_avalon_master_translator_avalon_universal_master_0_readdata),      //  output,  width = 32,          .readdata
		.av_waitrequest        (receive_packet_2_avalon_master_translator_avalon_universal_master_0_waitrequest),   //  output,   width = 1,          .waitrequest
		.av_readdatavalid      (receive_packet_2_avalon_master_translator_avalon_universal_master_0_readdatavalid), //  output,   width = 1,          .readdatavalid
		.av_byteenable         (receive_packet_2_avalon_master_translator_avalon_universal_master_0_byteenable),    //   input,   width = 4,          .byteenable
		.av_burstcount         (receive_packet_2_avalon_master_translator_avalon_universal_master_0_burstcount),    //   input,   width = 3,          .burstcount
		.av_debugaccess        (receive_packet_2_avalon_master_translator_avalon_universal_master_0_debugaccess),   //   input,   width = 1,          .debugaccess
		.av_lock               (receive_packet_2_avalon_master_translator_avalon_universal_master_0_lock),          //   input,   width = 1,          .lock
		.cp_valid              (receive_packet_2_avalon_master_agent_cp_valid),                                     //  output,   width = 1,        cp.valid
		.cp_data               (receive_packet_2_avalon_master_agent_cp_data),                                      //  output,  width = 91,          .data
		.cp_startofpacket      (receive_packet_2_avalon_master_agent_cp_startofpacket),                             //  output,   width = 1,          .startofpacket
		.cp_endofpacket        (receive_packet_2_avalon_master_agent_cp_endofpacket),                               //  output,   width = 1,          .endofpacket
		.cp_ready              (receive_packet_2_avalon_master_agent_cp_ready),                                     //   input,   width = 1,          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                             //   input,   width = 1,        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                              //   input,  width = 91,          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                           //   input,   width = 2,          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                     //   input,   width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                       //   input,   width = 1,          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                             //  output,   width = 1,          .ready
		.av_response           (),                                                                                  // (terminated),                        
		.av_writeresponsevalid ()                                                                                   // (terminated),                        
	);

	system_design_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (91),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mem_2_s1_agent (
		.clk                     (tse_mac_tx_clock_connection_1_clk),               //   input,   width = 1,             clk.clk
		.reset                   (send_packet_2_reset_reset_bridge_in_reset_reset), //   input,   width = 1,       clk_reset.reset
		.m0_address              (mem_2_s1_agent_m0_address),                       //  output,  width = 12,              m0.address
		.m0_burstcount           (mem_2_s1_agent_m0_burstcount),                    //  output,   width = 3,                .burstcount
		.m0_byteenable           (mem_2_s1_agent_m0_byteenable),                    //  output,   width = 4,                .byteenable
		.m0_debugaccess          (mem_2_s1_agent_m0_debugaccess),                   //  output,   width = 1,                .debugaccess
		.m0_lock                 (mem_2_s1_agent_m0_lock),                          //  output,   width = 1,                .lock
		.m0_readdata             (mem_2_s1_agent_m0_readdata),                      //   input,  width = 32,                .readdata
		.m0_readdatavalid        (mem_2_s1_agent_m0_readdatavalid),                 //   input,   width = 1,                .readdatavalid
		.m0_read                 (mem_2_s1_agent_m0_read),                          //  output,   width = 1,                .read
		.m0_waitrequest          (mem_2_s1_agent_m0_waitrequest),                   //   input,   width = 1,                .waitrequest
		.m0_writedata            (mem_2_s1_agent_m0_writedata),                     //  output,  width = 32,                .writedata
		.m0_write                (mem_2_s1_agent_m0_write),                         //  output,   width = 1,                .write
		.rp_endofpacket          (mem_2_s1_agent_rp_endofpacket),                   //  output,   width = 1,              rp.endofpacket
		.rp_ready                (mem_2_s1_agent_rp_ready),                         //   input,   width = 1,                .ready
		.rp_valid                (mem_2_s1_agent_rp_valid),                         //  output,   width = 1,                .valid
		.rp_data                 (mem_2_s1_agent_rp_data),                          //  output,  width = 91,                .data
		.rp_startofpacket        (mem_2_s1_agent_rp_startofpacket),                 //  output,   width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                               //  output,   width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                               //   input,   width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                //   input,  width = 91,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                       //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                         //   input,   width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                             //   input,   width = 2,                .channel
		.rf_sink_ready           (mem_2_s1_agent_rsp_fifo_out_ready),               //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (mem_2_s1_agent_rsp_fifo_out_valid),               //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (mem_2_s1_agent_rsp_fifo_out_startofpacket),       //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (mem_2_s1_agent_rsp_fifo_out_endofpacket),         //   input,   width = 1,                .endofpacket
		.rf_sink_data            (mem_2_s1_agent_rsp_fifo_out_data),                //   input,  width = 92,                .data
		.rf_source_ready         (mem_2_s1_agent_rf_source_ready),                  //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (mem_2_s1_agent_rf_source_valid),                  //  output,   width = 1,                .valid
		.rf_source_startofpacket (mem_2_s1_agent_rf_source_startofpacket),          //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (mem_2_s1_agent_rf_source_endofpacket),            //  output,   width = 1,                .endofpacket
		.rf_source_data          (mem_2_s1_agent_rf_source_data),                   //  output,  width = 92,                .data
		.rdata_fifo_sink_ready   (mem_2_s1_agent_rdata_fifo_out_ready),             //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mem_2_s1_agent_rdata_fifo_out_valid),             //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (mem_2_s1_agent_rdata_fifo_out_data),              //   input,  width = 34,                .data
		.rdata_fifo_src_ready    (mem_2_s1_agent_rdata_fifo_src_ready),             //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mem_2_s1_agent_rdata_fifo_src_valid),             //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (mem_2_s1_agent_rdata_fifo_src_data),              //  output,  width = 34,                .data
		.m0_response             (2'b00),                                           // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                            // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                             // (terminated),                              
	);

	system_design_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (92),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) mem_2_s1_agent_rsp_fifo (
		.clk               (tse_mac_tx_clock_connection_1_clk),               //   input,   width = 1,       clk.clk
		.reset             (send_packet_2_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (mem_2_s1_agent_rf_source_data),                   //   input,  width = 92,        in.data
		.in_valid          (mem_2_s1_agent_rf_source_valid),                  //   input,   width = 1,          .valid
		.in_ready          (mem_2_s1_agent_rf_source_ready),                  //  output,   width = 1,          .ready
		.in_startofpacket  (mem_2_s1_agent_rf_source_startofpacket),          //   input,   width = 1,          .startofpacket
		.in_endofpacket    (mem_2_s1_agent_rf_source_endofpacket),            //   input,   width = 1,          .endofpacket
		.out_data          (mem_2_s1_agent_rsp_fifo_out_data),                //  output,  width = 92,       out.data
		.out_valid         (mem_2_s1_agent_rsp_fifo_out_valid),               //  output,   width = 1,          .valid
		.out_ready         (mem_2_s1_agent_rsp_fifo_out_ready),               //   input,   width = 1,          .ready
		.out_startofpacket (mem_2_s1_agent_rsp_fifo_out_startofpacket),       //  output,   width = 1,          .startofpacket
		.out_endofpacket   (mem_2_s1_agent_rsp_fifo_out_endofpacket),         //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                           // (terminated),                        
		.csr_read          (1'b0),                                            // (terminated),                        
		.csr_write         (1'b0),                                            // (terminated),                        
		.csr_readdata      (),                                                // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated),                        
		.almost_full_data  (),                                                // (terminated),                        
		.almost_empty_data (),                                                // (terminated),                        
		.in_empty          (1'b0),                                            // (terminated),                        
		.out_empty         (),                                                // (terminated),                        
		.in_error          (1'b0),                                            // (terminated),                        
		.out_error         (),                                                // (terminated),                        
		.in_channel        (1'b0),                                            // (terminated),                        
		.out_channel       ()                                                 // (terminated),                        
	);

	system_design_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) mem_2_s1_agent_rdata_fifo (
		.clk               (tse_mac_tx_clock_connection_1_clk),               //   input,   width = 1,       clk.clk
		.reset             (send_packet_2_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (mem_2_s1_agent_rdata_fifo_src_data),              //   input,  width = 34,        in.data
		.in_valid          (mem_2_s1_agent_rdata_fifo_src_valid),             //   input,   width = 1,          .valid
		.in_ready          (mem_2_s1_agent_rdata_fifo_src_ready),             //  output,   width = 1,          .ready
		.out_data          (mem_2_s1_agent_rdata_fifo_out_data),              //  output,  width = 34,       out.data
		.out_valid         (mem_2_s1_agent_rdata_fifo_out_valid),             //  output,   width = 1,          .valid
		.out_ready         (mem_2_s1_agent_rdata_fifo_out_ready),             //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                           // (terminated),                        
		.csr_read          (1'b0),                                            // (terminated),                        
		.csr_write         (1'b0),                                            // (terminated),                        
		.csr_readdata      (),                                                // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated),                        
		.almost_full_data  (),                                                // (terminated),                        
		.almost_empty_data (),                                                // (terminated),                        
		.in_startofpacket  (1'b0),                                            // (terminated),                        
		.in_endofpacket    (1'b0),                                            // (terminated),                        
		.out_startofpacket (),                                                // (terminated),                        
		.out_endofpacket   (),                                                // (terminated),                        
		.in_empty          (1'b0),                                            // (terminated),                        
		.out_empty         (),                                                // (terminated),                        
		.in_error          (1'b0),                                            // (terminated),                        
		.out_error         (),                                                // (terminated),                        
		.in_channel        (1'b0),                                            // (terminated),                        
		.out_channel       ()                                                 // (terminated),                        
	);

	system_design_altera_merlin_router_1920_qttnjoi router (
		.sink_ready         (send_packet_2_avalon_master_agent_cp_ready),         //  output,   width = 1,      sink.ready
		.sink_valid         (send_packet_2_avalon_master_agent_cp_valid),         //   input,   width = 1,          .valid
		.sink_data          (send_packet_2_avalon_master_agent_cp_data),          //   input,  width = 91,          .data
		.sink_startofpacket (send_packet_2_avalon_master_agent_cp_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (send_packet_2_avalon_master_agent_cp_endofpacket),   //   input,   width = 1,          .endofpacket
		.clk                (tse_mac_tx_clock_connection_1_clk),                  //   input,   width = 1,       clk.clk
		.reset              (send_packet_2_reset_reset_bridge_in_reset_reset),    //   input,   width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                   //   input,   width = 1,       src.ready
		.src_valid          (router_src_valid),                                   //  output,   width = 1,          .valid
		.src_data           (router_src_data),                                    //  output,  width = 91,          .data
		.src_channel        (router_src_channel),                                 //  output,   width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                           //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                              //  output,   width = 1,          .endofpacket
	);

	system_design_altera_merlin_router_1920_qttnjoi router_001 (
		.sink_ready         (receive_packet_2_avalon_master_agent_cp_ready),         //  output,   width = 1,      sink.ready
		.sink_valid         (receive_packet_2_avalon_master_agent_cp_valid),         //   input,   width = 1,          .valid
		.sink_data          (receive_packet_2_avalon_master_agent_cp_data),          //   input,  width = 91,          .data
		.sink_startofpacket (receive_packet_2_avalon_master_agent_cp_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (receive_packet_2_avalon_master_agent_cp_endofpacket),   //   input,   width = 1,          .endofpacket
		.clk                (tse_mac_rx_clock_connection_1_clk),                     //   input,   width = 1,       clk.clk
		.reset              (receive_packet_2_reset_reset_bridge_in_reset_reset),    //   input,   width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                  //   input,   width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                  //  output,   width = 1,          .valid
		.src_data           (router_001_src_data),                                   //  output,  width = 91,          .data
		.src_channel        (router_001_src_channel),                                //  output,   width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                          //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                             //  output,   width = 1,          .endofpacket
	);

	system_design_altera_merlin_router_1920_sr4hbxi router_002 (
		.sink_ready         (mem_2_s1_agent_rp_ready),                         //  output,   width = 1,      sink.ready
		.sink_valid         (mem_2_s1_agent_rp_valid),                         //   input,   width = 1,          .valid
		.sink_data          (mem_2_s1_agent_rp_data),                          //   input,  width = 91,          .data
		.sink_startofpacket (mem_2_s1_agent_rp_startofpacket),                 //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (mem_2_s1_agent_rp_endofpacket),                   //   input,   width = 1,          .endofpacket
		.clk                (tse_mac_tx_clock_connection_1_clk),               //   input,   width = 1,       clk.clk
		.reset              (send_packet_2_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                            //   input,   width = 1,       src.ready
		.src_valid          (router_002_src_valid),                            //  output,   width = 1,          .valid
		.src_data           (router_002_src_data),                             //  output,  width = 91,          .data
		.src_channel        (router_002_src_channel),                          //  output,   width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                    //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                       //  output,   width = 1,          .endofpacket
	);

	system_design_altera_merlin_demultiplexer_1921_ekfzhji cmd_demux (
		.clk                (tse_mac_tx_clock_connection_1_clk),               //   input,   width = 1,       clk.clk
		.reset              (send_packet_2_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                //  output,   width = 1,      sink.ready
		.sink_channel       (router_src_channel),                              //   input,   width = 2,          .channel
		.sink_data          (router_src_data),                                 //   input,  width = 91,          .data
		.sink_startofpacket (router_src_startofpacket),                        //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                          //   input,   width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                //   input,   width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                            //   input,   width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                            //  output,   width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                             //  output,  width = 91,          .data
		.src0_channel       (cmd_demux_src0_channel),                          //  output,   width = 2,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                    //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                       //  output,   width = 1,          .endofpacket
	);

	system_design_altera_merlin_demultiplexer_1921_ekfzhji cmd_demux_001 (
		.clk                (tse_mac_rx_clock_connection_1_clk),                  //   input,   width = 1,       clk.clk
		.reset              (receive_packet_2_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                               //  output,   width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                             //   input,   width = 2,          .channel
		.sink_data          (router_001_src_data),                                //   input,  width = 91,          .data
		.sink_startofpacket (router_001_src_startofpacket),                       //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                         //   input,   width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                               //   input,   width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                           //   input,   width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                           //  output,   width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                            //  output,  width = 91,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                         //  output,   width = 2,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                   //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                      //  output,   width = 1,          .endofpacket
	);

	system_design_altera_merlin_multiplexer_1921_cworfkq cmd_mux (
		.clk                 (tse_mac_tx_clock_connection_1_clk),               //   input,   width = 1,       clk.clk
		.reset               (send_packet_2_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                               //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                               //  output,   width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                //  output,  width = 91,          .data
		.src_channel         (cmd_mux_src_channel),                             //  output,   width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                       //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                         //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                            //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                            //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                          //   input,   width = 2,          .channel
		.sink0_data          (cmd_demux_src0_data),                             //   input,  width = 91,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                    //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                      //   input,   width = 1,          .endofpacket
		.sink1_ready         (crosser_out_ready),                               //  output,   width = 1,     sink1.ready
		.sink1_valid         (crosser_out_valid),                               //   input,   width = 1,          .valid
		.sink1_channel       (crosser_out_channel),                             //   input,   width = 2,          .channel
		.sink1_data          (crosser_out_data),                                //   input,  width = 91,          .data
		.sink1_startofpacket (crosser_out_startofpacket),                       //   input,   width = 1,          .startofpacket
		.sink1_endofpacket   (crosser_out_endofpacket)                          //   input,   width = 1,          .endofpacket
	);

	system_design_altera_merlin_demultiplexer_1921_xu5xrea rsp_demux (
		.clk                (tse_mac_tx_clock_connection_1_clk),               //   input,   width = 1,       clk.clk
		.reset              (send_packet_2_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                            //  output,   width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                          //   input,   width = 2,          .channel
		.sink_data          (router_002_src_data),                             //   input,  width = 91,          .data
		.sink_startofpacket (router_002_src_startofpacket),                    //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                      //   input,   width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                            //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                            //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                            //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                             //  output,  width = 91,          .data
		.src0_channel       (rsp_demux_src0_channel),                          //  output,   width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                    //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                      //  output,   width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                            //   input,   width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                            //  output,   width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                             //  output,  width = 91,          .data
		.src1_channel       (rsp_demux_src1_channel),                          //  output,   width = 2,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                    //  output,   width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                       //  output,   width = 1,          .endofpacket
	);

	system_design_altera_merlin_multiplexer_1921_bp6ue5y rsp_mux (
		.clk                 (tse_mac_tx_clock_connection_1_clk),               //   input,   width = 1,       clk.clk
		.reset               (send_packet_2_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                               //   input,   width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                               //  output,   width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                //  output,  width = 91,          .data
		.src_channel         (rsp_mux_src_channel),                             //  output,   width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                       //  output,   width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                         //  output,   width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                            //  output,   width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                            //   input,   width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                          //   input,   width = 2,          .channel
		.sink0_data          (rsp_demux_src0_data),                             //   input,  width = 91,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                    //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                       //   input,   width = 1,          .endofpacket
	);

	system_design_altera_merlin_multiplexer_1921_bp6ue5y rsp_mux_001 (
		.clk                 (tse_mac_rx_clock_connection_1_clk),                  //   input,   width = 1,       clk.clk
		.reset               (receive_packet_2_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                              //   input,   width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                              //  output,   width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                               //  output,  width = 91,          .data
		.src_channel         (rsp_mux_001_src_channel),                            //  output,   width = 2,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                      //  output,   width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                        //  output,   width = 1,          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                              //  output,   width = 1,     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                              //   input,   width = 1,          .valid
		.sink0_channel       (crosser_001_out_channel),                            //   input,   width = 2,          .channel
		.sink0_data          (crosser_001_out_data),                               //   input,  width = 91,          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                      //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                         //   input,   width = 1,          .endofpacket
	);

	system_design_hs_clk_xer_1931_cgvepdq #(
		.DATA_WIDTH          (91),
		.BITS_PER_SYMBOL     (91),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser (
		.in_clk            (tse_mac_rx_clock_connection_1_clk),                  //   input,   width = 1,        in_clk.clk
		.in_reset          (receive_packet_2_reset_reset_bridge_in_reset_reset), //   input,   width = 1,  in_clk_reset.reset
		.out_clk           (tse_mac_tx_clock_connection_1_clk),                  //   input,   width = 1,       out_clk.clk
		.out_reset         (send_packet_2_reset_reset_bridge_in_reset_reset),    //   input,   width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                           //  output,   width = 1,            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                           //   input,   width = 1,              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                   //   input,   width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                     //   input,   width = 1,              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                         //   input,   width = 2,              .channel
		.in_data           (cmd_demux_001_src0_data),                            //   input,  width = 91,              .data
		.out_ready         (crosser_out_ready),                                  //   input,   width = 1,           out.ready
		.out_valid         (crosser_out_valid),                                  //  output,   width = 1,              .valid
		.out_startofpacket (crosser_out_startofpacket),                          //  output,   width = 1,              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                            //  output,   width = 1,              .endofpacket
		.out_channel       (crosser_out_channel),                                //  output,   width = 2,              .channel
		.out_data          (crosser_out_data),                                   //  output,  width = 91,              .data
		.in_empty          (1'b0),                                               // (terminated),                            
		.in_error          (1'b0),                                               // (terminated),                            
		.out_empty         (),                                                   // (terminated),                            
		.out_error         ()                                                    // (terminated),                            
	);

	system_design_hs_clk_xer_1931_cgvepdq #(
		.DATA_WIDTH          (91),
		.BITS_PER_SYMBOL     (91),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_001 (
		.in_clk            (tse_mac_tx_clock_connection_1_clk),                  //   input,   width = 1,        in_clk.clk
		.in_reset          (send_packet_2_reset_reset_bridge_in_reset_reset),    //   input,   width = 1,  in_clk_reset.reset
		.out_clk           (tse_mac_rx_clock_connection_1_clk),                  //   input,   width = 1,       out_clk.clk
		.out_reset         (receive_packet_2_reset_reset_bridge_in_reset_reset), //   input,   width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_src1_ready),                               //  output,   width = 1,            in.ready
		.in_valid          (rsp_demux_src1_valid),                               //   input,   width = 1,              .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                       //   input,   width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                         //   input,   width = 1,              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                             //   input,   width = 2,              .channel
		.in_data           (rsp_demux_src1_data),                                //   input,  width = 91,              .data
		.out_ready         (crosser_001_out_ready),                              //   input,   width = 1,           out.ready
		.out_valid         (crosser_001_out_valid),                              //  output,   width = 1,              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                      //  output,   width = 1,              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                        //  output,   width = 1,              .endofpacket
		.out_channel       (crosser_001_out_channel),                            //  output,   width = 2,              .channel
		.out_data          (crosser_001_out_data),                               //  output,  width = 91,              .data
		.in_empty          (1'b0),                                               // (terminated),                            
		.in_error          (1'b0),                                               // (terminated),                            
		.out_empty         (),                                                   // (terminated),                            
		.out_error         ()                                                    // (terminated),                            
	);

endmodule
