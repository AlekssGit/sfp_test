// system_design_altera_mm_interconnect_1920_nmewghq.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 21.4 67

`timescale 1 ps / 1 ps
module system_design_altera_mm_interconnect_1920_nmewghq (
		input  wire [63:0]  pcie_rxm_bar0_address,                                      //                                        pcie_rxm_bar0.address
		output wire         pcie_rxm_bar0_waitrequest,                                  //                                                     .waitrequest
		input  wire [5:0]   pcie_rxm_bar0_burstcount,                                   //                                                     .burstcount
		input  wire [15:0]  pcie_rxm_bar0_byteenable,                                   //                                                     .byteenable
		input  wire         pcie_rxm_bar0_read,                                         //                                                     .read
		output wire [127:0] pcie_rxm_bar0_readdata,                                     //                                                     .readdata
		output wire         pcie_rxm_bar0_readdatavalid,                                //                                                     .readdatavalid
		input  wire         pcie_rxm_bar0_write,                                        //                                                     .write
		input  wire [127:0] pcie_rxm_bar0_writedata,                                    //                                                     .writedata
		output wire [15:0]  send_cmd_pcie_avalon_slave_address,                         //                           send_cmd_pcie_avalon_slave.address
		output wire         send_cmd_pcie_avalon_slave_write,                           //                                                     .write
		output wire         send_cmd_pcie_avalon_slave_read,                            //                                                     .read
		input  wire [31:0]  send_cmd_pcie_avalon_slave_readdata,                        //                                                     .readdata
		output wire [31:0]  send_cmd_pcie_avalon_slave_writedata,                       //                                                     .writedata
		input  wire         send_cmd_pcie_avalon_slave_readdatavalid,                   //                                                     .readdatavalid
		input  wire         pcie_rxm_bar0_translator_reset_reset_bridge_in_reset_reset, // pcie_rxm_bar0_translator_reset_reset_bridge_in_reset.reset
		input  wire         pcie_coreclkout_hip_clk                                     //                                  pcie_coreclkout_hip.clk
	);

	wire          pcie_rxm_bar0_translator_avalon_universal_master_0_waitrequest;   // pcie_rxm_bar0_agent:av_waitrequest -> pcie_rxm_bar0_translator:uav_waitrequest
	wire  [127:0] pcie_rxm_bar0_translator_avalon_universal_master_0_readdata;      // pcie_rxm_bar0_agent:av_readdata -> pcie_rxm_bar0_translator:uav_readdata
	wire          pcie_rxm_bar0_translator_avalon_universal_master_0_debugaccess;   // pcie_rxm_bar0_translator:uav_debugaccess -> pcie_rxm_bar0_agent:av_debugaccess
	wire   [63:0] pcie_rxm_bar0_translator_avalon_universal_master_0_address;       // pcie_rxm_bar0_translator:uav_address -> pcie_rxm_bar0_agent:av_address
	wire          pcie_rxm_bar0_translator_avalon_universal_master_0_read;          // pcie_rxm_bar0_translator:uav_read -> pcie_rxm_bar0_agent:av_read
	wire   [15:0] pcie_rxm_bar0_translator_avalon_universal_master_0_byteenable;    // pcie_rxm_bar0_translator:uav_byteenable -> pcie_rxm_bar0_agent:av_byteenable
	wire          pcie_rxm_bar0_translator_avalon_universal_master_0_readdatavalid; // pcie_rxm_bar0_agent:av_readdatavalid -> pcie_rxm_bar0_translator:uav_readdatavalid
	wire          pcie_rxm_bar0_translator_avalon_universal_master_0_lock;          // pcie_rxm_bar0_translator:uav_lock -> pcie_rxm_bar0_agent:av_lock
	wire          pcie_rxm_bar0_translator_avalon_universal_master_0_write;         // pcie_rxm_bar0_translator:uav_write -> pcie_rxm_bar0_agent:av_write
	wire  [127:0] pcie_rxm_bar0_translator_avalon_universal_master_0_writedata;     // pcie_rxm_bar0_translator:uav_writedata -> pcie_rxm_bar0_agent:av_writedata
	wire    [9:0] pcie_rxm_bar0_translator_avalon_universal_master_0_burstcount;    // pcie_rxm_bar0_translator:uav_burstcount -> pcie_rxm_bar0_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                // rsp_mux:src_valid -> pcie_rxm_bar0_agent:rp_valid
	wire  [257:0] rsp_mux_src_data;                                                 // rsp_mux:src_data -> pcie_rxm_bar0_agent:rp_data
	wire          rsp_mux_src_ready;                                                // pcie_rxm_bar0_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                              // rsp_mux:src_channel -> pcie_rxm_bar0_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                        // rsp_mux:src_startofpacket -> pcie_rxm_bar0_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                          // rsp_mux:src_endofpacket -> pcie_rxm_bar0_agent:rp_endofpacket
	wire   [31:0] send_cmd_pcie_avalon_slave_agent_m0_readdata;                     // send_cmd_pcie_avalon_slave_translator:uav_readdata -> send_cmd_pcie_avalon_slave_agent:m0_readdata
	wire          send_cmd_pcie_avalon_slave_agent_m0_waitrequest;                  // send_cmd_pcie_avalon_slave_translator:uav_waitrequest -> send_cmd_pcie_avalon_slave_agent:m0_waitrequest
	wire          send_cmd_pcie_avalon_slave_agent_m0_debugaccess;                  // send_cmd_pcie_avalon_slave_agent:m0_debugaccess -> send_cmd_pcie_avalon_slave_translator:uav_debugaccess
	wire   [63:0] send_cmd_pcie_avalon_slave_agent_m0_address;                      // send_cmd_pcie_avalon_slave_agent:m0_address -> send_cmd_pcie_avalon_slave_translator:uav_address
	wire    [3:0] send_cmd_pcie_avalon_slave_agent_m0_byteenable;                   // send_cmd_pcie_avalon_slave_agent:m0_byteenable -> send_cmd_pcie_avalon_slave_translator:uav_byteenable
	wire          send_cmd_pcie_avalon_slave_agent_m0_read;                         // send_cmd_pcie_avalon_slave_agent:m0_read -> send_cmd_pcie_avalon_slave_translator:uav_read
	wire          send_cmd_pcie_avalon_slave_agent_m0_readdatavalid;                // send_cmd_pcie_avalon_slave_translator:uav_readdatavalid -> send_cmd_pcie_avalon_slave_agent:m0_readdatavalid
	wire          send_cmd_pcie_avalon_slave_agent_m0_lock;                         // send_cmd_pcie_avalon_slave_agent:m0_lock -> send_cmd_pcie_avalon_slave_translator:uav_lock
	wire   [31:0] send_cmd_pcie_avalon_slave_agent_m0_writedata;                    // send_cmd_pcie_avalon_slave_agent:m0_writedata -> send_cmd_pcie_avalon_slave_translator:uav_writedata
	wire          send_cmd_pcie_avalon_slave_agent_m0_write;                        // send_cmd_pcie_avalon_slave_agent:m0_write -> send_cmd_pcie_avalon_slave_translator:uav_write
	wire    [2:0] send_cmd_pcie_avalon_slave_agent_m0_burstcount;                   // send_cmd_pcie_avalon_slave_agent:m0_burstcount -> send_cmd_pcie_avalon_slave_translator:uav_burstcount
	wire          send_cmd_pcie_avalon_slave_agent_rf_source_valid;                 // send_cmd_pcie_avalon_slave_agent:rf_source_valid -> send_cmd_pcie_avalon_slave_agent_rsp_fifo:in_valid
	wire  [150:0] send_cmd_pcie_avalon_slave_agent_rf_source_data;                  // send_cmd_pcie_avalon_slave_agent:rf_source_data -> send_cmd_pcie_avalon_slave_agent_rsp_fifo:in_data
	wire          send_cmd_pcie_avalon_slave_agent_rf_source_ready;                 // send_cmd_pcie_avalon_slave_agent_rsp_fifo:in_ready -> send_cmd_pcie_avalon_slave_agent:rf_source_ready
	wire          send_cmd_pcie_avalon_slave_agent_rf_source_startofpacket;         // send_cmd_pcie_avalon_slave_agent:rf_source_startofpacket -> send_cmd_pcie_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          send_cmd_pcie_avalon_slave_agent_rf_source_endofpacket;           // send_cmd_pcie_avalon_slave_agent:rf_source_endofpacket -> send_cmd_pcie_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          send_cmd_pcie_avalon_slave_agent_rsp_fifo_out_valid;              // send_cmd_pcie_avalon_slave_agent_rsp_fifo:out_valid -> send_cmd_pcie_avalon_slave_agent:rf_sink_valid
	wire  [150:0] send_cmd_pcie_avalon_slave_agent_rsp_fifo_out_data;               // send_cmd_pcie_avalon_slave_agent_rsp_fifo:out_data -> send_cmd_pcie_avalon_slave_agent:rf_sink_data
	wire          send_cmd_pcie_avalon_slave_agent_rsp_fifo_out_ready;              // send_cmd_pcie_avalon_slave_agent:rf_sink_ready -> send_cmd_pcie_avalon_slave_agent_rsp_fifo:out_ready
	wire          send_cmd_pcie_avalon_slave_agent_rsp_fifo_out_startofpacket;      // send_cmd_pcie_avalon_slave_agent_rsp_fifo:out_startofpacket -> send_cmd_pcie_avalon_slave_agent:rf_sink_startofpacket
	wire          send_cmd_pcie_avalon_slave_agent_rsp_fifo_out_endofpacket;        // send_cmd_pcie_avalon_slave_agent_rsp_fifo:out_endofpacket -> send_cmd_pcie_avalon_slave_agent:rf_sink_endofpacket
	wire          send_cmd_pcie_avalon_slave_agent_rdata_fifo_src_valid;            // send_cmd_pcie_avalon_slave_agent:rdata_fifo_src_valid -> send_cmd_pcie_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] send_cmd_pcie_avalon_slave_agent_rdata_fifo_src_data;             // send_cmd_pcie_avalon_slave_agent:rdata_fifo_src_data -> send_cmd_pcie_avalon_slave_agent:rdata_fifo_sink_data
	wire          send_cmd_pcie_avalon_slave_agent_rdata_fifo_src_ready;            // send_cmd_pcie_avalon_slave_agent:rdata_fifo_sink_ready -> send_cmd_pcie_avalon_slave_agent:rdata_fifo_src_ready
	wire          pcie_rxm_bar0_agent_cp_valid;                                     // pcie_rxm_bar0_agent:cp_valid -> router:sink_valid
	wire  [257:0] pcie_rxm_bar0_agent_cp_data;                                      // pcie_rxm_bar0_agent:cp_data -> router:sink_data
	wire          pcie_rxm_bar0_agent_cp_ready;                                     // router:sink_ready -> pcie_rxm_bar0_agent:cp_ready
	wire          pcie_rxm_bar0_agent_cp_startofpacket;                             // pcie_rxm_bar0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          pcie_rxm_bar0_agent_cp_endofpacket;                               // pcie_rxm_bar0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                 // router:src_valid -> cmd_demux:sink_valid
	wire  [257:0] router_src_data;                                                  // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                 // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                               // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                         // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                           // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          send_cmd_pcie_avalon_slave_agent_rp_valid;                        // send_cmd_pcie_avalon_slave_agent:rp_valid -> router_001:sink_valid
	wire  [149:0] send_cmd_pcie_avalon_slave_agent_rp_data;                         // send_cmd_pcie_avalon_slave_agent:rp_data -> router_001:sink_data
	wire          send_cmd_pcie_avalon_slave_agent_rp_ready;                        // router_001:sink_ready -> send_cmd_pcie_avalon_slave_agent:rp_ready
	wire          send_cmd_pcie_avalon_slave_agent_rp_startofpacket;                // send_cmd_pcie_avalon_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          send_cmd_pcie_avalon_slave_agent_rp_endofpacket;                  // send_cmd_pcie_avalon_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          send_cmd_pcie_avalon_slave_burst_adapter_source0_valid;           // send_cmd_pcie_avalon_slave_burst_adapter:source0_valid -> send_cmd_pcie_avalon_slave_agent:cp_valid
	wire  [149:0] send_cmd_pcie_avalon_slave_burst_adapter_source0_data;            // send_cmd_pcie_avalon_slave_burst_adapter:source0_data -> send_cmd_pcie_avalon_slave_agent:cp_data
	wire          send_cmd_pcie_avalon_slave_burst_adapter_source0_ready;           // send_cmd_pcie_avalon_slave_agent:cp_ready -> send_cmd_pcie_avalon_slave_burst_adapter:source0_ready
	wire    [0:0] send_cmd_pcie_avalon_slave_burst_adapter_source0_channel;         // send_cmd_pcie_avalon_slave_burst_adapter:source0_channel -> send_cmd_pcie_avalon_slave_agent:cp_channel
	wire          send_cmd_pcie_avalon_slave_burst_adapter_source0_startofpacket;   // send_cmd_pcie_avalon_slave_burst_adapter:source0_startofpacket -> send_cmd_pcie_avalon_slave_agent:cp_startofpacket
	wire          send_cmd_pcie_avalon_slave_burst_adapter_source0_endofpacket;     // send_cmd_pcie_avalon_slave_burst_adapter:source0_endofpacket -> send_cmd_pcie_avalon_slave_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                             // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [257:0] cmd_demux_src0_data;                                              // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                             // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                           // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                     // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                       // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                             // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [257:0] rsp_demux_src0_data;                                              // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                             // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                           // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                     // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                       // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          router_001_src_valid;                                             // router_001:src_valid -> send_cmd_pcie_avalon_slave_rsp_width_adapter:in_valid
	wire  [149:0] router_001_src_data;                                              // router_001:src_data -> send_cmd_pcie_avalon_slave_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                             // send_cmd_pcie_avalon_slave_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                           // router_001:src_channel -> send_cmd_pcie_avalon_slave_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                     // router_001:src_startofpacket -> send_cmd_pcie_avalon_slave_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                       // router_001:src_endofpacket -> send_cmd_pcie_avalon_slave_rsp_width_adapter:in_endofpacket
	wire          send_cmd_pcie_avalon_slave_rsp_width_adapter_src_valid;           // send_cmd_pcie_avalon_slave_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [257:0] send_cmd_pcie_avalon_slave_rsp_width_adapter_src_data;            // send_cmd_pcie_avalon_slave_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          send_cmd_pcie_avalon_slave_rsp_width_adapter_src_ready;           // rsp_demux:sink_ready -> send_cmd_pcie_avalon_slave_rsp_width_adapter:out_ready
	wire    [0:0] send_cmd_pcie_avalon_slave_rsp_width_adapter_src_channel;         // send_cmd_pcie_avalon_slave_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          send_cmd_pcie_avalon_slave_rsp_width_adapter_src_startofpacket;   // send_cmd_pcie_avalon_slave_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          send_cmd_pcie_avalon_slave_rsp_width_adapter_src_endofpacket;     // send_cmd_pcie_avalon_slave_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                // cmd_mux:src_valid -> send_cmd_pcie_avalon_slave_cmd_width_adapter:in_valid
	wire  [257:0] cmd_mux_src_data;                                                 // cmd_mux:src_data -> send_cmd_pcie_avalon_slave_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                // send_cmd_pcie_avalon_slave_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                              // cmd_mux:src_channel -> send_cmd_pcie_avalon_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                        // cmd_mux:src_startofpacket -> send_cmd_pcie_avalon_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                          // cmd_mux:src_endofpacket -> send_cmd_pcie_avalon_slave_cmd_width_adapter:in_endofpacket
	wire          send_cmd_pcie_avalon_slave_cmd_width_adapter_src_valid;           // send_cmd_pcie_avalon_slave_cmd_width_adapter:out_valid -> send_cmd_pcie_avalon_slave_burst_adapter:sink0_valid
	wire  [149:0] send_cmd_pcie_avalon_slave_cmd_width_adapter_src_data;            // send_cmd_pcie_avalon_slave_cmd_width_adapter:out_data -> send_cmd_pcie_avalon_slave_burst_adapter:sink0_data
	wire          send_cmd_pcie_avalon_slave_cmd_width_adapter_src_ready;           // send_cmd_pcie_avalon_slave_burst_adapter:sink0_ready -> send_cmd_pcie_avalon_slave_cmd_width_adapter:out_ready
	wire    [0:0] send_cmd_pcie_avalon_slave_cmd_width_adapter_src_channel;         // send_cmd_pcie_avalon_slave_cmd_width_adapter:out_channel -> send_cmd_pcie_avalon_slave_burst_adapter:sink0_channel
	wire          send_cmd_pcie_avalon_slave_cmd_width_adapter_src_startofpacket;   // send_cmd_pcie_avalon_slave_cmd_width_adapter:out_startofpacket -> send_cmd_pcie_avalon_slave_burst_adapter:sink0_startofpacket
	wire          send_cmd_pcie_avalon_slave_cmd_width_adapter_src_endofpacket;     // send_cmd_pcie_avalon_slave_cmd_width_adapter:out_endofpacket -> send_cmd_pcie_avalon_slave_burst_adapter:sink0_endofpacket

	system_design_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) pcie_rxm_bar0_translator (
		.clk                    (pcie_coreclkout_hip_clk),                                          //   input,    width = 1,                       clk.clk
		.reset                  (pcie_rxm_bar0_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1,                     reset.reset
		.uav_address            (pcie_rxm_bar0_translator_avalon_universal_master_0_address),       //  output,   width = 64, avalon_universal_master_0.address
		.uav_burstcount         (pcie_rxm_bar0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 10,                          .burstcount
		.uav_read               (pcie_rxm_bar0_translator_avalon_universal_master_0_read),          //  output,    width = 1,                          .read
		.uav_write              (pcie_rxm_bar0_translator_avalon_universal_master_0_write),         //  output,    width = 1,                          .write
		.uav_waitrequest        (pcie_rxm_bar0_translator_avalon_universal_master_0_waitrequest),   //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (pcie_rxm_bar0_translator_avalon_universal_master_0_readdatavalid), //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (pcie_rxm_bar0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 16,                          .byteenable
		.uav_readdata           (pcie_rxm_bar0_translator_avalon_universal_master_0_readdata),      //   input,  width = 128,                          .readdata
		.uav_writedata          (pcie_rxm_bar0_translator_avalon_universal_master_0_writedata),     //  output,  width = 128,                          .writedata
		.uav_lock               (pcie_rxm_bar0_translator_avalon_universal_master_0_lock),          //  output,    width = 1,                          .lock
		.uav_debugaccess        (pcie_rxm_bar0_translator_avalon_universal_master_0_debugaccess),   //  output,    width = 1,                          .debugaccess
		.av_address             (pcie_rxm_bar0_address),                                            //   input,   width = 64,      avalon_anti_master_0.address
		.av_waitrequest         (pcie_rxm_bar0_waitrequest),                                        //  output,    width = 1,                          .waitrequest
		.av_burstcount          (pcie_rxm_bar0_burstcount),                                         //   input,    width = 6,                          .burstcount
		.av_byteenable          (pcie_rxm_bar0_byteenable),                                         //   input,   width = 16,                          .byteenable
		.av_read                (pcie_rxm_bar0_read),                                               //   input,    width = 1,                          .read
		.av_readdata            (pcie_rxm_bar0_readdata),                                           //  output,  width = 128,                          .readdata
		.av_readdatavalid       (pcie_rxm_bar0_readdatavalid),                                      //  output,    width = 1,                          .readdatavalid
		.av_write               (pcie_rxm_bar0_write),                                              //   input,    width = 1,                          .write
		.av_writedata           (pcie_rxm_bar0_writedata),                                          //   input,  width = 128,                          .writedata
		.av_beginbursttransfer  (1'b0),                                                             // (terminated),                                         
		.av_begintransfer       (1'b0),                                                             // (terminated),                                         
		.av_chipselect          (1'b0),                                                             // (terminated),                                         
		.av_lock                (1'b0),                                                             // (terminated),                                         
		.av_debugaccess         (1'b0),                                                             // (terminated),                                         
		.uav_clken              (),                                                                 // (terminated),                                         
		.av_clken               (1'b1),                                                             // (terminated),                                         
		.uav_response           (2'b00),                                                            // (terminated),                                         
		.av_response            (),                                                                 // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                             // (terminated),                                         
		.av_writeresponsevalid  ()                                                                  // (terminated),                                         
	);

	system_design_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) send_cmd_pcie_avalon_slave_translator (
		.clk                    (pcie_coreclkout_hip_clk),                                    //   input,   width = 1,                      clk.clk
		.reset                  (pcie_rxm_bar0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (send_cmd_pcie_avalon_slave_agent_m0_address),                //   input,  width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (send_cmd_pcie_avalon_slave_agent_m0_burstcount),             //   input,   width = 3,                         .burstcount
		.uav_read               (send_cmd_pcie_avalon_slave_agent_m0_read),                   //   input,   width = 1,                         .read
		.uav_write              (send_cmd_pcie_avalon_slave_agent_m0_write),                  //   input,   width = 1,                         .write
		.uav_waitrequest        (send_cmd_pcie_avalon_slave_agent_m0_waitrequest),            //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (send_cmd_pcie_avalon_slave_agent_m0_readdatavalid),          //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (send_cmd_pcie_avalon_slave_agent_m0_byteenable),             //   input,   width = 4,                         .byteenable
		.uav_readdata           (send_cmd_pcie_avalon_slave_agent_m0_readdata),               //  output,  width = 32,                         .readdata
		.uav_writedata          (send_cmd_pcie_avalon_slave_agent_m0_writedata),              //   input,  width = 32,                         .writedata
		.uav_lock               (send_cmd_pcie_avalon_slave_agent_m0_lock),                   //   input,   width = 1,                         .lock
		.uav_debugaccess        (send_cmd_pcie_avalon_slave_agent_m0_debugaccess),            //   input,   width = 1,                         .debugaccess
		.av_address             (send_cmd_pcie_avalon_slave_address),                         //  output,  width = 16,      avalon_anti_slave_0.address
		.av_write               (send_cmd_pcie_avalon_slave_write),                           //  output,   width = 1,                         .write
		.av_read                (send_cmd_pcie_avalon_slave_read),                            //  output,   width = 1,                         .read
		.av_readdata            (send_cmd_pcie_avalon_slave_readdata),                        //   input,  width = 32,                         .readdata
		.av_writedata           (send_cmd_pcie_avalon_slave_writedata),                       //  output,  width = 32,                         .writedata
		.av_readdatavalid       (send_cmd_pcie_avalon_slave_readdatavalid),                   //   input,   width = 1,                         .readdatavalid
		.av_begintransfer       (),                                                           // (terminated),                                       
		.av_beginbursttransfer  (),                                                           // (terminated),                                       
		.av_burstcount          (),                                                           // (terminated),                                       
		.av_byteenable          (),                                                           // (terminated),                                       
		.av_waitrequest         (1'b0),                                                       // (terminated),                                       
		.av_writebyteenable     (),                                                           // (terminated),                                       
		.av_lock                (),                                                           // (terminated),                                       
		.av_chipselect          (),                                                           // (terminated),                                       
		.av_clken               (),                                                           // (terminated),                                       
		.uav_clken              (1'b0),                                                       // (terminated),                                       
		.av_debugaccess         (),                                                           // (terminated),                                       
		.av_outputenable        (),                                                           // (terminated),                                       
		.uav_response           (),                                                           // (terminated),                                       
		.av_response            (2'b00),                                                      // (terminated),                                       
		.uav_writeresponsevalid (),                                                           // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                        // (terminated),                                       
	);

	system_design_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (257),
		.PKT_DOMAIN_H              (256),
		.PKT_DOMAIN_L              (255),
		.PKT_SNOOP_H               (254),
		.PKT_SNOOP_L               (251),
		.PKT_BARRIER_H             (250),
		.PKT_BARRIER_L             (249),
		.PKT_ORI_BURST_SIZE_H      (248),
		.PKT_ORI_BURST_SIZE_L      (246),
		.PKT_RESPONSE_STATUS_H     (245),
		.PKT_RESPONSE_STATUS_L     (244),
		.PKT_QOS_H                 (233),
		.PKT_QOS_L                 (233),
		.PKT_DATA_SIDEBAND_H       (231),
		.PKT_DATA_SIDEBAND_L       (231),
		.PKT_ADDR_SIDEBAND_H       (230),
		.PKT_ADDR_SIDEBAND_L       (230),
		.PKT_BURST_TYPE_H          (229),
		.PKT_BURST_TYPE_L          (228),
		.PKT_CACHE_H               (243),
		.PKT_CACHE_L               (240),
		.PKT_THREAD_ID_H           (236),
		.PKT_THREAD_ID_L           (236),
		.PKT_BURST_SIZE_H          (227),
		.PKT_BURST_SIZE_L          (225),
		.PKT_TRANS_EXCLUSIVE       (213),
		.PKT_TRANS_LOCK            (212),
		.PKT_BEGIN_BURST           (232),
		.PKT_PROTECTION_H          (239),
		.PKT_PROTECTION_L          (237),
		.PKT_BURSTWRAP_H           (224),
		.PKT_BURSTWRAP_L           (224),
		.PKT_BYTE_CNT_H            (223),
		.PKT_BYTE_CNT_L            (214),
		.PKT_ADDR_H                (207),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (208),
		.PKT_TRANS_POSTED          (209),
		.PKT_TRANS_WRITE           (210),
		.PKT_TRANS_READ            (211),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (234),
		.PKT_SRC_ID_L              (234),
		.PKT_DEST_ID_H             (235),
		.PKT_DEST_ID_L             (235),
		.ST_DATA_W                 (258),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) pcie_rxm_bar0_agent (
		.clk                   (pcie_coreclkout_hip_clk),                                          //   input,    width = 1,       clk.clk
		.reset                 (pcie_rxm_bar0_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (pcie_rxm_bar0_translator_avalon_universal_master_0_address),       //   input,   width = 64,        av.address
		.av_write              (pcie_rxm_bar0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (pcie_rxm_bar0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (pcie_rxm_bar0_translator_avalon_universal_master_0_writedata),     //   input,  width = 128,          .writedata
		.av_readdata           (pcie_rxm_bar0_translator_avalon_universal_master_0_readdata),      //  output,  width = 128,          .readdata
		.av_waitrequest        (pcie_rxm_bar0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (pcie_rxm_bar0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (pcie_rxm_bar0_translator_avalon_universal_master_0_byteenable),    //   input,   width = 16,          .byteenable
		.av_burstcount         (pcie_rxm_bar0_translator_avalon_universal_master_0_burstcount),    //   input,   width = 10,          .burstcount
		.av_debugaccess        (pcie_rxm_bar0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (pcie_rxm_bar0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (pcie_rxm_bar0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (pcie_rxm_bar0_agent_cp_data),                                      //  output,  width = 258,          .data
		.cp_startofpacket      (pcie_rxm_bar0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (pcie_rxm_bar0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (pcie_rxm_bar0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                 //   input,  width = 258,          .data
		.rp_channel            (rsp_mux_src_channel),                                              //   input,    width = 1,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                //  output,    width = 1,          .ready
		.av_response           (),                                                                 // (terminated),                         
		.av_writeresponsevalid ()                                                                  // (terminated),                         
	);

	system_design_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (140),
		.PKT_ORI_BURST_SIZE_L      (138),
		.PKT_RESPONSE_STATUS_H     (137),
		.PKT_RESPONSE_STATUS_L     (136),
		.PKT_BURST_SIZE_H          (119),
		.PKT_BURST_SIZE_L          (117),
		.PKT_TRANS_LOCK            (104),
		.PKT_BEGIN_BURST           (124),
		.PKT_PROTECTION_H          (131),
		.PKT_PROTECTION_L          (129),
		.PKT_BURSTWRAP_H           (116),
		.PKT_BURSTWRAP_L           (116),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (126),
		.PKT_SRC_ID_L              (126),
		.PKT_DEST_ID_H             (127),
		.PKT_DEST_ID_L             (127),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (150),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) send_cmd_pcie_avalon_slave_agent (
		.clk                     (pcie_coreclkout_hip_clk),                                        //   input,    width = 1,             clk.clk
		.reset                   (pcie_rxm_bar0_translator_reset_reset_bridge_in_reset_reset),     //   input,    width = 1,       clk_reset.reset
		.m0_address              (send_cmd_pcie_avalon_slave_agent_m0_address),                    //  output,   width = 64,              m0.address
		.m0_burstcount           (send_cmd_pcie_avalon_slave_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (send_cmd_pcie_avalon_slave_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (send_cmd_pcie_avalon_slave_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (send_cmd_pcie_avalon_slave_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (send_cmd_pcie_avalon_slave_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (send_cmd_pcie_avalon_slave_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (send_cmd_pcie_avalon_slave_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (send_cmd_pcie_avalon_slave_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (send_cmd_pcie_avalon_slave_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (send_cmd_pcie_avalon_slave_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (send_cmd_pcie_avalon_slave_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (send_cmd_pcie_avalon_slave_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (send_cmd_pcie_avalon_slave_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (send_cmd_pcie_avalon_slave_agent_rp_data),                       //  output,  width = 150,                .data
		.rp_startofpacket        (send_cmd_pcie_avalon_slave_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (send_cmd_pcie_avalon_slave_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (send_cmd_pcie_avalon_slave_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (send_cmd_pcie_avalon_slave_burst_adapter_source0_data),          //   input,  width = 150,                .data
		.cp_startofpacket        (send_cmd_pcie_avalon_slave_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (send_cmd_pcie_avalon_slave_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (send_cmd_pcie_avalon_slave_burst_adapter_source0_channel),       //   input,    width = 1,                .channel
		.rf_sink_ready           (send_cmd_pcie_avalon_slave_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (send_cmd_pcie_avalon_slave_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (send_cmd_pcie_avalon_slave_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (send_cmd_pcie_avalon_slave_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (send_cmd_pcie_avalon_slave_agent_rsp_fifo_out_data),             //   input,  width = 151,                .data
		.rf_source_ready         (send_cmd_pcie_avalon_slave_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (send_cmd_pcie_avalon_slave_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (send_cmd_pcie_avalon_slave_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (send_cmd_pcie_avalon_slave_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (send_cmd_pcie_avalon_slave_agent_rf_source_data),                //  output,  width = 151,                .data
		.rdata_fifo_sink_ready   (send_cmd_pcie_avalon_slave_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (send_cmd_pcie_avalon_slave_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (send_cmd_pcie_avalon_slave_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (send_cmd_pcie_avalon_slave_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (send_cmd_pcie_avalon_slave_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (send_cmd_pcie_avalon_slave_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                            // (terminated),                               
	);

	system_design_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (151),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) send_cmd_pcie_avalon_slave_agent_rsp_fifo (
		.clk               (pcie_coreclkout_hip_clk),                                     //   input,    width = 1,       clk.clk
		.reset             (pcie_rxm_bar0_translator_reset_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.in_data           (send_cmd_pcie_avalon_slave_agent_rf_source_data),             //   input,  width = 151,        in.data
		.in_valid          (send_cmd_pcie_avalon_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (send_cmd_pcie_avalon_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (send_cmd_pcie_avalon_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (send_cmd_pcie_avalon_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (send_cmd_pcie_avalon_slave_agent_rsp_fifo_out_data),          //  output,  width = 151,       out.data
		.out_valid         (send_cmd_pcie_avalon_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (send_cmd_pcie_avalon_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (send_cmd_pcie_avalon_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (send_cmd_pcie_avalon_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated),                         
		.csr_read          (1'b0),                                                        // (terminated),                         
		.csr_write         (1'b0),                                                        // (terminated),                         
		.csr_readdata      (),                                                            // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated),                         
		.almost_full_data  (),                                                            // (terminated),                         
		.almost_empty_data (),                                                            // (terminated),                         
		.in_empty          (1'b0),                                                        // (terminated),                         
		.out_empty         (),                                                            // (terminated),                         
		.in_error          (1'b0),                                                        // (terminated),                         
		.out_error         (),                                                            // (terminated),                         
		.in_channel        (1'b0),                                                        // (terminated),                         
		.out_channel       ()                                                             // (terminated),                         
	);

	system_design_altera_merlin_router_1920_etguxaa router (
		.sink_ready         (pcie_rxm_bar0_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (pcie_rxm_bar0_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (pcie_rxm_bar0_agent_cp_data),                                //   input,  width = 258,          .data
		.sink_startofpacket (pcie_rxm_bar0_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (pcie_rxm_bar0_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (pcie_coreclkout_hip_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pcie_rxm_bar0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                           //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                           //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                            //  output,  width = 258,          .data
		.src_channel        (router_src_channel),                                         //  output,    width = 1,          .channel
		.src_startofpacket  (router_src_startofpacket),                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                      //  output,    width = 1,          .endofpacket
	);

	system_design_altera_merlin_router_1920_njnyfdy router_001 (
		.sink_ready         (send_cmd_pcie_avalon_slave_agent_rp_ready),                  //  output,    width = 1,      sink.ready
		.sink_valid         (send_cmd_pcie_avalon_slave_agent_rp_valid),                  //   input,    width = 1,          .valid
		.sink_data          (send_cmd_pcie_avalon_slave_agent_rp_data),                   //   input,  width = 150,          .data
		.sink_startofpacket (send_cmd_pcie_avalon_slave_agent_rp_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (send_cmd_pcie_avalon_slave_agent_rp_endofpacket),            //   input,    width = 1,          .endofpacket
		.clk                (pcie_coreclkout_hip_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pcie_rxm_bar0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                       //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                       //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                        //  output,  width = 150,          .data
		.src_channel        (router_001_src_channel),                                     //  output,    width = 1,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                  //  output,    width = 1,          .endofpacket
	);

	system_design_altera_merlin_burst_adapter_1921_guf3z7y #(
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (124),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (119),
		.PKT_BURST_SIZE_L          (117),
		.PKT_BURST_TYPE_H          (121),
		.PKT_BURST_TYPE_L          (120),
		.PKT_BURSTWRAP_H           (116),
		.PKT_BURSTWRAP_L           (116),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (150),
		.ST_CHANNEL_W              (1),
		.OUT_BYTE_CNT_H            (106),
		.OUT_BURSTWRAP_H           (116),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) send_cmd_pcie_avalon_slave_burst_adapter (
		.clk                   (pcie_coreclkout_hip_clk),                                        //   input,    width = 1,       cr0.clk
		.reset                 (pcie_rxm_bar0_translator_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (send_cmd_pcie_avalon_slave_cmd_width_adapter_src_valid),         //   input,    width = 1,     sink0.valid
		.sink0_data            (send_cmd_pcie_avalon_slave_cmd_width_adapter_src_data),          //   input,  width = 150,          .data
		.sink0_channel         (send_cmd_pcie_avalon_slave_cmd_width_adapter_src_channel),       //   input,    width = 1,          .channel
		.sink0_startofpacket   (send_cmd_pcie_avalon_slave_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (send_cmd_pcie_avalon_slave_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink0_ready           (send_cmd_pcie_avalon_slave_cmd_width_adapter_src_ready),         //  output,    width = 1,          .ready
		.source0_valid         (send_cmd_pcie_avalon_slave_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (send_cmd_pcie_avalon_slave_burst_adapter_source0_data),          //  output,  width = 150,          .data
		.source0_channel       (send_cmd_pcie_avalon_slave_burst_adapter_source0_channel),       //  output,    width = 1,          .channel
		.source0_startofpacket (send_cmd_pcie_avalon_slave_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (send_cmd_pcie_avalon_slave_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (send_cmd_pcie_avalon_slave_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	system_design_altera_merlin_demultiplexer_1921_t6ir34q cmd_demux (
		.clk                (pcie_coreclkout_hip_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pcie_rxm_bar0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                         //   input,    width = 1,          .channel
		.sink_data          (router_src_data),                                            //   input,  width = 258,          .data
		.sink_startofpacket (router_src_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                           //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                       //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                       //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                        //  output,  width = 258,          .data
		.src0_channel       (cmd_demux_src0_channel),                                     //  output,    width = 1,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                  //  output,    width = 1,          .endofpacket
	);

	system_design_altera_merlin_multiplexer_1921_mtk5gaa cmd_mux (
		.clk                 (pcie_coreclkout_hip_clk),                                    //   input,    width = 1,       clk.clk
		.reset               (pcie_rxm_bar0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                           //  output,  width = 258,          .data
		.src_channel         (cmd_mux_src_channel),                                        //  output,    width = 1,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                       //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                       //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                     //   input,    width = 1,          .channel
		.sink0_data          (cmd_demux_src0_data),                                        //   input,  width = 258,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                  //   input,    width = 1,          .endofpacket
	);

	system_design_altera_merlin_demultiplexer_1921_t6ir34q rsp_demux (
		.clk                (pcie_coreclkout_hip_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (pcie_rxm_bar0_translator_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.sink_ready         (send_cmd_pcie_avalon_slave_rsp_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (send_cmd_pcie_avalon_slave_rsp_width_adapter_src_channel),       //   input,    width = 1,          .channel
		.sink_data          (send_cmd_pcie_avalon_slave_rsp_width_adapter_src_data),          //   input,  width = 258,          .data
		.sink_startofpacket (send_cmd_pcie_avalon_slave_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (send_cmd_pcie_avalon_slave_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (send_cmd_pcie_avalon_slave_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                           //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                           //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                            //  output,  width = 258,          .data
		.src0_channel       (rsp_demux_src0_channel),                                         //  output,    width = 1,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                   //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                      //  output,    width = 1,          .endofpacket
	);

	system_design_altera_merlin_multiplexer_1921_jdujepi rsp_mux (
		.clk                 (pcie_coreclkout_hip_clk),                                    //   input,    width = 1,       clk.clk
		.reset               (pcie_rxm_bar0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                          //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                           //  output,  width = 258,          .data
		.src_channel         (rsp_mux_src_channel),                                        //  output,    width = 1,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                       //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                       //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                     //   input,    width = 1,          .channel
		.sink0_data          (rsp_demux_src0_data),                                        //   input,  width = 258,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                  //   input,    width = 1,          .endofpacket
	);

	system_design_altera_merlin_width_adapter_1920_sbsfocy #(
		.IN_PKT_ADDR_H                 (99),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (106),
		.IN_PKT_TRANS_COMPRESSED_READ  (100),
		.IN_PKT_TRANS_WRITE            (102),
		.IN_PKT_BURSTWRAP_H            (116),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (119),
		.IN_PKT_BURST_SIZE_L           (117),
		.IN_PKT_RESPONSE_STATUS_H      (137),
		.IN_PKT_RESPONSE_STATUS_L      (136),
		.IN_PKT_TRANS_EXCLUSIVE        (105),
		.IN_PKT_BURST_TYPE_H           (121),
		.IN_PKT_BURST_TYPE_L           (120),
		.IN_PKT_ORI_BURST_SIZE_L       (138),
		.IN_PKT_ORI_BURST_SIZE_H       (140),
		.IN_ST_DATA_W                  (150),
		.OUT_PKT_ADDR_H                (207),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (223),
		.OUT_PKT_BYTE_CNT_L            (214),
		.OUT_PKT_TRANS_COMPRESSED_READ (208),
		.OUT_PKT_BURST_SIZE_H          (227),
		.OUT_PKT_BURST_SIZE_L          (225),
		.OUT_PKT_RESPONSE_STATUS_H     (245),
		.OUT_PKT_RESPONSE_STATUS_L     (244),
		.OUT_PKT_TRANS_EXCLUSIVE       (213),
		.OUT_PKT_BURST_TYPE_H          (229),
		.OUT_PKT_BURST_TYPE_L          (228),
		.OUT_PKT_ORI_BURST_SIZE_L      (246),
		.OUT_PKT_ORI_BURST_SIZE_H      (248),
		.OUT_ST_DATA_W                 (258),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) send_cmd_pcie_avalon_slave_rsp_width_adapter (
		.clk                  (pcie_coreclkout_hip_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (pcie_rxm_bar0_translator_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.in_valid             (router_001_src_valid),                                           //   input,    width = 1,      sink.valid
		.in_channel           (router_001_src_channel),                                         //   input,    width = 1,          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.in_ready             (router_001_src_ready),                                           //  output,    width = 1,          .ready
		.in_data              (router_001_src_data),                                            //   input,  width = 150,          .data
		.out_endofpacket      (send_cmd_pcie_avalon_slave_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (send_cmd_pcie_avalon_slave_rsp_width_adapter_src_data),          //  output,  width = 258,          .data
		.out_channel          (send_cmd_pcie_avalon_slave_rsp_width_adapter_src_channel),       //  output,    width = 1,          .channel
		.out_valid            (send_cmd_pcie_avalon_slave_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (send_cmd_pcie_avalon_slave_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (send_cmd_pcie_avalon_slave_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated),                         
	);

	system_design_altera_merlin_width_adapter_1920_mqc4ddi #(
		.IN_PKT_ADDR_H                 (207),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (223),
		.IN_PKT_BYTE_CNT_L             (214),
		.IN_PKT_TRANS_COMPRESSED_READ  (208),
		.IN_PKT_TRANS_WRITE            (210),
		.IN_PKT_BURSTWRAP_H            (224),
		.IN_PKT_BURSTWRAP_L            (224),
		.IN_PKT_BURST_SIZE_H           (227),
		.IN_PKT_BURST_SIZE_L           (225),
		.IN_PKT_RESPONSE_STATUS_H      (245),
		.IN_PKT_RESPONSE_STATUS_L      (244),
		.IN_PKT_TRANS_EXCLUSIVE        (213),
		.IN_PKT_BURST_TYPE_H           (229),
		.IN_PKT_BURST_TYPE_L           (228),
		.IN_PKT_ORI_BURST_SIZE_L       (246),
		.IN_PKT_ORI_BURST_SIZE_H       (248),
		.IN_ST_DATA_W                  (258),
		.OUT_PKT_ADDR_H                (99),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (106),
		.OUT_PKT_TRANS_COMPRESSED_READ (100),
		.OUT_PKT_BURST_SIZE_H          (119),
		.OUT_PKT_BURST_SIZE_L          (117),
		.OUT_PKT_RESPONSE_STATUS_H     (137),
		.OUT_PKT_RESPONSE_STATUS_L     (136),
		.OUT_PKT_TRANS_EXCLUSIVE       (105),
		.OUT_PKT_BURST_TYPE_H          (121),
		.OUT_PKT_BURST_TYPE_L          (120),
		.OUT_PKT_ORI_BURST_SIZE_L      (138),
		.OUT_PKT_ORI_BURST_SIZE_H      (140),
		.OUT_ST_DATA_W                 (150),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) send_cmd_pcie_avalon_slave_cmd_width_adapter (
		.clk                  (pcie_coreclkout_hip_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (pcie_rxm_bar0_translator_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                              //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_src_channel),                                            //   input,    width = 1,          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                      //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                        //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                              //  output,    width = 1,          .ready
		.in_data              (cmd_mux_src_data),                                               //   input,  width = 258,          .data
		.out_endofpacket      (send_cmd_pcie_avalon_slave_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (send_cmd_pcie_avalon_slave_cmd_width_adapter_src_data),          //  output,  width = 150,          .data
		.out_channel          (send_cmd_pcie_avalon_slave_cmd_width_adapter_src_channel),       //  output,    width = 1,          .channel
		.out_valid            (send_cmd_pcie_avalon_slave_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (send_cmd_pcie_avalon_slave_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (send_cmd_pcie_avalon_slave_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated),                         
	);

endmodule
